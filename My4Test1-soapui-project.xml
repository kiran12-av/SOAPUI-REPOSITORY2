<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="MyTest1" resourceRoot="" soapui-version="5.0.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="ICLNBIDataServiceBinding" type="wsdl" bindingName="{http://www.ICLNBI.com/ICLNBI.xsd/WSDL}ICLNBIDataServiceBinding" soapVersion="1_1" anonymous="optional" definition="http://iclsmxtest.test.intranet:10001/icl/services/ICL_2_0?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://iclsmxtest.test.intranet:10001/icl/services/ICL_2_0?wsdl"><con:part><con:url>http://iclsmxtest.test.intranet:10001/icl/services/ICL_2_0?wsdl</con:url><con:content><![CDATA[<definitions targetNamespace="http://www.ICLNBI.com/ICLNBI.xsd/WSDL" xsi:schemaLocation="http://www.ICLNBI.com/ICLNBI_V2.00.xsd http://collaboration.ad.qintra.com/bu/it/application/SYSGEN0787126173/Shared%20Documents/DA%20Artifacts/Common%20XSD/ICL_V2.23.xsd" xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:SOAP="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:tns="http://www.ICLNBI.com/ICLNBI_V2.00.xsd" xmlns:wsdltns="http://www.ICLNBI.com/ICLNBI.xsd/WSDL" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <types>
    <xs:schema attributeFormDefault="unqualified" elementFormDefault="unqualified" targetNamespace="http://www.ICLNBI.com/ICLNBI_V2.00.xsd" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xs="http://www.w3.org/2001/XMLSchema">
      <xs:include schemaLocation="http://iclsmxtest.test.intranet:10001/icl/services/ICL_2_0?xsd=ICL_V2.23.xsd"/>
    </xs:schema>
  </types>
  <message name="IdentifyPortRequest">
    <part element="tns:IdentifyPortRequest" name="IdentifyPortRequest"></part>
  </message>
  <message name="CreateTopologyRequest">
    <part element="tns:CreateTopologyRequest" name="CreateTopologyRequest"></part>
  </message>
  <message name="UpdateServiceResponse">
    <part element="tns:UpdateServiceResponse" name="UpdateServiceResponse"></part>
  </message>
  <message name="CreatePartyResponse">
    <part element="tns:CreatePartyResponse" name="CreatePartyReturn"></part>
  </message>
  <message name="SearchResourceSpecRequest">
    <part element="tns:SearchResourceSpecRequest" name="searchResourceSpec"></part>
  </message>
  <message name="CreateDeviceResponse">
    <part element="tns:CreateDeviceResponse" name="CreateDeviceReturn"></part>
  </message>
  <message name="CreateCircuitRequest">
    <part element="tns:CreateCircuitRequest" name="createCircuit"></part>
  </message>
  <message name="RestoreObjectImageResponse">
    <part element="tns:RestoreObjectImageResponse" name="RestoreObjectImageResponse"></part>
  </message>
  <message name="CreatePartyRequest">
    <part element="tns:CreatePartyRequest" name="createParty"></part>
  </message>
  <message name="CreateLocationResponse">
    <part element="tns:CreateLocationResponse" name="CreateLocationReturn"></part>
  </message>
  <message name="UpdateTerminationPointResponse">
    <part element="tns:UpdateTerminationPointResponse" name="UpdateTerminationPointReturn"></part>
  </message>
  <message name="UpdateLocationRequest">
    <part element="tns:UpdateLocationRequest" name="updateLocation"></part>
  </message>
  <message name="CreateObjectImageRequest">
    <part element="tns:CreateObjectImageRequest" name="CreateObjectImageRequest"></part>
  </message>
  <message name="CreateTopologyResponse">
    <part element="tns:CreateTopologyResponse" name="CreateTopologyResponse"></part>
  </message>
  <message name="CreateFlowDomainRequest">
    <part element="tns:CreateFlowDomainRequest" name="CreateFlowDomainRequest"></part>
  </message>
  <message name="CreateServiceRequest">
    <part element="tns:CreateServiceRequest" name="CreateServiceRequest"></part>
  </message>
  <message name="ConsumeNumberObjectRequest">
    <part element="tns:ConsumeNumberObjectRequest" name="ConsumeNumberObject"></part>
  </message>
  <message name="DeleteDeviceRequest">
    <part element="tns:DeleteDeviceRequest" name="DeleteDevice"></part>
  </message>
  <message name="UpdatePartyResponse">
    <part element="tns:UpdatePartyResponse" name="UpdatePartyReturn"></part>
  </message>
  <message name="CreateServiceResponse">
    <part element="tns:CreateServiceResponse" name="CreateServiceResponse"></part>
  </message>
  <message name="GenerateMCORequest">
    <part element="tns:GenerateMCORequest" name="GenerateMCORequest"></part>
  </message>
  <message name="CreateSTagResponse">
    <part element="tns:CreateSTagResponse" name="CreateSTagResponse"></part>
  </message>
  <message name="CreateLocationRequest">
    <part element="tns:CreateLocationRequest" name="createLocation"></part>
  </message>
  <message name="UpdateCircuitRequest">
    <part element="tns:UpdateCircuitRequest" name="updateCircuit"></part>
  </message>
  <message name="UpdateServiceRequest">
    <part element="tns:UpdateServiceRequest" name="UpdateServiceRequest"></part>
  </message>
  <message name="ValidationResourceRequest">
    <part element="tns:ValidationResourceRequest" name="ValidationResourceRequest"></part>
  </message>
  <message name="DeletePartyRequest">
    <part element="tns:DeletePartyRequest" name="DeleteParty"></part>
  </message>
  <message name="UpdateDeviceRequest">
    <part element="tns:UpdateDeviceRequest" name="updateDevice"></part>
  </message>
  <message name="UpdateCircuitResponse">
    <part element="tns:UpdateCircuitResponse" name="UpdateCircuitReturn"></part>
  </message>
  <message name="DeleteObjectImageRequest">
    <part element="tns:DeleteObjectImageRequest" name="DeleteObjectImageRequest"></part>
  </message>
  <message name="UpdateTerminationPointRequest">
    <part element="tns:UpdateTerminationPointRequest" name="updateTerminationPoint"></part>
  </message>
  <message name="CreateSTagRequest">
    <part element="tns:CreateSTagRequest" name="CreateSTagRequest"></part>
  </message>
  <message name="DeleteServiceResponse">
    <part element="tns:DeleteServiceResponse" name="DeleteServiceResponse"></part>
  </message>
  <message name="SearchResourceSpecResponse">
    <part element="tns:SearchResourceSpecResponse" name="SearchResourceSpecReturn"></part>
  </message>
  <message name="DeleteTopologyResponse">
    <part element="tns:DeleteTopologyResponse" name="DeleteTopologyResponse"></part>
  </message>
  <message name="UpdateTopologyRequest">
    <part element="tns:UpdateTopologyRequest" name="UpdateTopologyRequest"></part>
  </message>
  <message name="SearchResourceResponse">
    <part element="tns:SearchResourceResponse" name="SearchResourceReturn"></part>
  </message>
  <message name="DeleteServiceRequest">
    <part element="tns:DeleteServiceRequest" name="DeleteServiceRequest"></part>
  </message>
  <message name="DeleteDeviceResponse">
    <part element="tns:DeleteDeviceResponse" name="DeleteDeviceReturn"></part>
  </message>
  <message name="CreateDeviceRequest">
    <part element="tns:CreateDeviceRequest" name="createDevice"></part>
  </message>
  <message name="DeleteLocationRequest">
    <part element="tns:DeleteLocationRequest" name="DeleteLocation"></part>
  </message>
  <message name="DeleteTopologyRequest">
    <part element="tns:DeleteTopologyRequest" name="DeleteTopologyRequest"></part>
  </message>
  <message name="CreateCugResponse">
    <part element="tns:CreateCugResponse" name="CreateCugResponse"></part>
  </message>
  <message name="RestoreObjectImageRequest">
    <part element="tns:RestoreObjectImageRequest" name="RestoreObjectImageRequest"></part>
  </message>
  <message name="GenerateMCOResponse">
    <part element="tns:GenerateMCOResponse" name="GenerateMCOResponse"></part>
  </message>
  <message name="ValidationResourceResponse">
    <part element="tns:ValidationResourceResponse" name="ValidationResourceResponse"></part>
  </message>
  <message name="ConsumeNumberObjectResponse">
    <part element="tns:ConsumeNumberObjectResponse" name="ConsumeNumberObjectReturn"></part>
  </message>
  <message name="UpdateLocationResponse">
    <part element="tns:UpdateLocationResponse" name="UpdateLocationReturn"></part>
  </message>
  <message name="CreateFlowDomainResponse">
    <part element="tns:CreateFlowDomainResponse" name="CreateFlowDomainResponse"></part>
  </message>
  <message name="CreateObjectImageResponse">
    <part element="tns:CreateObjectImageResponse" name="CreateObjectImageResponse"></part>
  </message>
  <message name="UpdatePartyRequest">
    <part element="tns:UpdatePartyRequest" name="updateParty"></part>
  </message>
  <message name="ReleaseNumberObjectResponse">
    <part element="tns:ReleaseNumberObjectResponse" name="ReleaseNumberObjectReturn"></part>
  </message>
  <message name="DeleteCircuitResponse">
    <part element="tns:DeleteCircuitResponse" name="DeleteCircuitReturn"></part>
  </message>
  <message name="DeletePartyResponse">
    <part element="tns:DeletePartyResponse" name="DeletePartyReturn"></part>
  </message>
  <message name="DeleteCircuitRequest">
    <part element="tns:DeleteCircuitRequest" name="DeleteCircuit"></part>
  </message>
  <message name="SearchResourceRequest">
    <part element="tns:SearchResourceRequest" name="searchResource"></part>
  </message>
  <message name="DeleteObjectImageResponse">
    <part element="tns:DeleteObjectImageResponse" name="DeleteObjectImageResponse"></part>
  </message>
  <message name="UpdateDeviceResponse">
    <part element="tns:UpdateDeviceResponse" name="UpdateDeviceReturn"></part>
  </message>
  <message name="ReleaseNumberObjectRequest">
    <part element="tns:ReleaseNumberObjectRequest" name="ReleaseNumberObject"></part>
  </message>
  <message name="CreateCircuitResponse">
    <part element="tns:CreateCircuitResponse" name="CreateCircuitReturn"></part>
  </message>
  <message name="UpdateTopologyResponse">
    <part element="tns:UpdateTopologyResponse" name="UpdateTopologyResponse"></part>
  </message>
  <message name="CreateCugRequest">
    <part element="tns:CreateCugRequest" name="CreateCugRequest"></part>
  </message>
  <message name="IdentifyPortResponse">
    <part element="tns:IdentifyPortResponse" name="IdentifyPortResponse"></part>
  </message>
  <message name="DeleteLocationResponse">
    <part element="tns:DeleteLocationResponse" name="DeleteLocationReturn"></part>
  </message>
  <portType name="ICLNBIDataServicePortType">
    <operation name="CreateParty">
      <input message="wsdltns:CreatePartyRequest"></input>
      <output message="wsdltns:CreatePartyResponse"></output>
    </operation>
    <operation name="UpdateParty">
      <input message="wsdltns:UpdatePartyRequest"></input>
      <output message="wsdltns:UpdatePartyResponse"></output>
    </operation>
    <operation name="DeleteParty">
      <input message="wsdltns:DeletePartyRequest"></input>
      <output message="wsdltns:DeletePartyResponse"></output>
    </operation>
    <operation name="CreateLocation">
      <input message="wsdltns:CreateLocationRequest"></input>
      <output message="wsdltns:CreateLocationResponse"></output>
    </operation>
    <operation name="UpdateLocation">
      <input message="wsdltns:UpdateLocationRequest"></input>
      <output message="wsdltns:UpdateLocationResponse"></output>
    </operation>
    <operation name="DeleteLocation">
      <input message="wsdltns:DeleteLocationRequest"></input>
      <output message="wsdltns:DeleteLocationResponse"></output>
    </operation>
    <operation name="CreateCircuit">
      <input message="wsdltns:CreateCircuitRequest"></input>
      <output message="wsdltns:CreateCircuitResponse"></output>
    </operation>
    <operation name="UpdateCircuit">
      <input message="wsdltns:UpdateCircuitRequest"></input>
      <output message="wsdltns:UpdateCircuitResponse"></output>
    </operation>
    <operation name="DeleteCircuit">
      <input message="wsdltns:DeleteCircuitRequest"></input>
      <output message="wsdltns:DeleteCircuitResponse"></output>
    </operation>
    <operation name="CreateDevice">
      <input message="wsdltns:CreateDeviceRequest"></input>
      <output message="wsdltns:CreateDeviceResponse"></output>
    </operation>
    <operation name="UpdateDevice">
      <input message="wsdltns:UpdateDeviceRequest"></input>
      <output message="wsdltns:UpdateDeviceResponse"></output>
    </operation>
    <operation name="DeleteDevice">
      <input message="wsdltns:DeleteDeviceRequest"></input>
      <output message="wsdltns:DeleteDeviceResponse"></output>
    </operation>
    <operation name="SearchResourceSpec">
      <input message="wsdltns:SearchResourceSpecRequest"></input>
      <output message="wsdltns:SearchResourceSpecResponse"></output>
    </operation>
    <operation name="SearchResource">
      <input message="wsdltns:SearchResourceRequest"></input>
      <output message="wsdltns:SearchResourceResponse"></output>
    </operation>
    <operation name="UpdateTerminationPoint">
      <input message="wsdltns:UpdateTerminationPointRequest"></input>
      <output message="wsdltns:UpdateTerminationPointResponse"></output>
    </operation>
    <operation name="ConsumeNumberObject">
      <input message="wsdltns:ConsumeNumberObjectRequest"></input>
      <output message="wsdltns:ConsumeNumberObjectResponse"></output>
    </operation>
    <operation name="ReleaseNumberObject">
      <input message="wsdltns:ReleaseNumberObjectRequest"></input>
      <output message="wsdltns:ReleaseNumberObjectResponse"></output>
    </operation>
    <operation name="CreateService">
      <input message="wsdltns:CreateServiceRequest"></input>
      <output message="wsdltns:CreateServiceResponse"></output>
    </operation>
    <operation name="DeleteService">
      <input message="wsdltns:DeleteServiceRequest"></input>
      <output message="wsdltns:DeleteServiceResponse"></output>
    </operation>
    <operation name="UpdateService">
      <input message="wsdltns:UpdateServiceRequest"></input>
      <output message="wsdltns:UpdateServiceResponse"></output>
    </operation>
    <operation name="CreateFlowDomain">
      <input message="wsdltns:CreateFlowDomainRequest"></input>
      <output message="wsdltns:CreateFlowDomainResponse"></output>
    </operation>
    <operation name="CreateCug">
      <input message="wsdltns:CreateCugRequest"></input>
      <output message="wsdltns:CreateCugResponse"></output>
    </operation>
    <operation name="CreateObjectImage">
      <input message="wsdltns:CreateObjectImageRequest"></input>
      <output message="wsdltns:CreateObjectImageResponse"></output>
    </operation>
    <operation name="RestoreObjectImage">
      <input message="wsdltns:RestoreObjectImageRequest"></input>
      <output message="wsdltns:RestoreObjectImageResponse"></output>
    </operation>
    <operation name="DeleteObjectImage">
      <input message="wsdltns:DeleteObjectImageRequest"></input>
      <output message="wsdltns:DeleteObjectImageResponse"></output>
    </operation>
    <operation name="GenerateMCO">
      <input message="wsdltns:GenerateMCORequest"></input>
      <output message="wsdltns:GenerateMCOResponse"></output>
    </operation>
    <operation name="CreateTopology">
      <input message="wsdltns:CreateTopologyRequest"></input>
      <output message="wsdltns:CreateTopologyResponse"></output>
    </operation>
    <operation name="DeleteTopology">
      <input message="wsdltns:DeleteTopologyRequest"></input>
      <output message="wsdltns:DeleteTopologyResponse"></output>
    </operation>
    <operation name="UpdateTopology">
      <input message="wsdltns:UpdateTopologyRequest"></input>
      <output message="wsdltns:UpdateTopologyResponse"></output>
    </operation>
    <operation name="IdentifyPort">
      <input message="wsdltns:IdentifyPortRequest"></input>
      <output message="wsdltns:IdentifyPortResponse"></output>
    </operation>
    <operation name="ValidationResource">
      <input message="wsdltns:ValidationResourceRequest"></input>
      <output message="wsdltns:ValidationResourceResponse"></output>
    </operation>
    <operation name="CreateSTag">
      <input message="wsdltns:CreateSTagRequest"></input>
      <output message="wsdltns:CreateSTagResponse"></output>
    </operation>
  </portType>
  <binding name="ICLNBIDataServiceBinding" type="wsdltns:ICLNBIDataServicePortType">
    <SOAP:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <operation name="CreateParty">
      <SOAP:operation soapAction="http://www.ICLNBIDataService.com/CreateLocation"/>
      <input>
        <SOAP:body use="literal"/>
      </input>
      <output>
        <SOAP:body use="literal"/>
      </output>
    </operation>
    <operation name="UpdateParty">
      <SOAP:operation soapAction="http://www.ICLNBIDataService.com/UpdateLocation"/>
      <input>
        <SOAP:body use="literal"/>
      </input>
      <output>
        <SOAP:body use="literal"/>
      </output>
    </operation>
    <operation name="DeleteParty">
      <SOAP:operation soapAction="http://www.ICLNBIDataService.com/UpdateLocation"/>
      <input>
        <SOAP:body use="literal"/>
      </input>
      <output>
        <SOAP:body use="literal"/>
      </output>
    </operation>
    <operation name="CreateLocation">
      <SOAP:operation soapAction="http://www.ICLNBIDataService.com/CreateLocation"/>
      <input>
        <SOAP:body use="literal"/>
      </input>
      <output>
        <SOAP:body use="literal"/>
      </output>
    </operation>
    <operation name="UpdateLocation">
      <SOAP:operation soapAction="http://www.ICLNBIDataService.com/UpdateLocation"/>
      <input>
        <SOAP:body use="literal"/>
      </input>
      <output>
        <SOAP:body use="literal"/>
      </output>
    </operation>
    <operation name="DeleteLocation">
      <SOAP:operation soapAction="http://www.ICLNBIDataService.com/UpdateLocation"/>
      <input>
        <SOAP:body use="literal"/>
      </input>
      <output>
        <SOAP:body use="literal"/>
      </output>
    </operation>
    <operation name="CreateCircuit">
      <SOAP:operation soapAction="http://www.ICLNBIDataService.com/CreateCircuit"/>
      <input>
        <SOAP:body use="literal"/>
      </input>
      <output>
        <SOAP:body use="literal"/>
      </output>
    </operation>
    <operation name="UpdateCircuit">
      <SOAP:operation soapAction="http://www.ICLNBIDataService.com/UpdateCircuit"/>
      <input>
        <SOAP:body use="literal"/>
      </input>
      <output>
        <SOAP:body use="literal"/>
      </output>
    </operation>
    <operation name="DeleteCircuit">
      <SOAP:operation soapAction="http://www.ICLNBIDataService.com/UpdateCircuit"/>
      <input>
        <SOAP:body use="literal"/>
      </input>
      <output>
        <SOAP:body use="literal"/>
      </output>
    </operation>
    <operation name="CreateDevice">
      <SOAP:operation soapAction="http://www.ICLNBIDataService.com/CreateDevice"/>
      <input>
        <SOAP:body use="literal"/>
      </input>
      <output>
        <SOAP:body use="literal"/>
      </output>
    </operation>
    <operation name="UpdateDevice">
      <SOAP:operation soapAction="http://www.ICLNBIDataService.com/UpdateDevice"/>
      <input>
        <SOAP:body use="literal"/>
      </input>
      <output>
        <SOAP:body use="literal"/>
      </output>
    </operation>
    <operation name="DeleteDevice">
      <SOAP:operation soapAction="http://www.ICLNBIDataService.com/UpdateDevice"/>
      <input>
        <SOAP:body use="literal"/>
      </input>
      <output>
        <SOAP:body use="literal"/>
      </output>
    </operation>
    <operation name="SearchResourceSpec">
      <SOAP:operation soapAction="http://www.ICLNBIDataService.com/SearchResourceSpec"/>
      <input>
        <SOAP:body use="literal"/>
      </input>
      <output>
        <SOAP:body use="literal"/>
      </output>
    </operation>
    <operation name="SearchResource">
      <SOAP:operation soapAction="http://www.ICLNBIDataService.com/SearchResource"/>
      <input>
        <SOAP:body use="literal"/>
      </input>
      <output>
        <SOAP:body use="literal"/>
      </output>
    </operation>
    <operation name="UpdateTerminationPoint">
      <SOAP:operation soapAction="http://www.ICLNBIDataService.com/UpdateTerminationPoint"/>
      <input>
        <SOAP:body use="literal"/>
      </input>
      <output>
        <SOAP:body use="literal"/>
      </output>
    </operation>
    <operation name="ConsumeNumberObject">
      <SOAP:operation soapAction="http://www.ICLNBIDataService.com/ConsumeNumberObject"/>
      <input>
        <SOAP:body use="literal"/>
      </input>
      <output>
        <SOAP:body use="literal"/>
      </output>
    </operation>
    <operation name="ReleaseNumberObject">
      <SOAP:operation soapAction="http://www.ICLNBIDataService.com/ReleaseNumberObject"/>
      <input>
        <SOAP:body use="literal"/>
      </input>
      <output>
        <SOAP:body use="literal"/>
      </output>
    </operation>
    <operation name="CreateService">
      <SOAP:operation soapAction="http://www.ICLNBIDataService.com/CreateService"/>
      <input>
        <SOAP:body use="literal"/>
      </input>
      <output>
        <SOAP:body use="literal"/>
      </output>
    </operation>
    <operation name="DeleteService">
      <SOAP:operation soapAction="http://www.ICLNBIDataService.com/DeleteService"/>
      <input>
        <SOAP:body use="literal"/>
      </input>
      <output>
        <SOAP:body use="literal"/>
      </output>
    </operation>
    <operation name="UpdateService">
      <SOAP:operation soapAction="http://www.ICLNBIDataService.com/UpdateService"/>
      <input>
        <SOAP:body use="literal"/>
      </input>
      <output>
        <SOAP:body use="literal"/>
      </output>
    </operation>
    <operation name="CreateFlowDomain">
      <SOAP:operation soapAction="http://www.ICLNBIDataService.com/CreateFlowDomain"/>
      <input>
        <SOAP:body use="literal"/>
      </input>
      <output>
        <SOAP:body use="literal"/>
      </output>
    </operation>
    <operation name="CreateCug">
      <SOAP:operation soapAction="http://www.ICLNBIDataService.com/CreateCug"/>
      <input>
        <SOAP:body use="literal"/>
      </input>
      <output>
        <SOAP:body use="literal"/>
      </output>
    </operation>
    <operation name="CreateObjectImage">
      <SOAP:operation soapAction="http://www.ICLNBIDataService.com/CreateObjectImage"/>
      <input>
        <SOAP:body use="literal"/>
      </input>
      <output>
        <SOAP:body use="literal"/>
      </output>
    </operation>
    <operation name="RestoreObjectImage">
      <SOAP:operation soapAction="http://www.ICLNBIDataService.com/RestoreObjectImage"/>
      <input>
        <SOAP:body use="literal"/>
      </input>
      <output>
        <SOAP:body use="literal"/>
      </output>
    </operation>
    <operation name="DeleteObjectImage">
      <SOAP:operation soapAction="http://www.ICLNBIDataService.com/DeleteObjectImage"/>
      <input>
        <SOAP:body use="literal"/>
      </input>
      <output>
        <SOAP:body use="literal"/>
      </output>
    </operation>
    <operation name="GenerateMCO">
      <SOAP:operation soapAction="http://www.ICLNBIDataService.com/GenerateMCO"/>
      <input>
        <SOAP:body use="literal"/>
      </input>
      <output>
        <SOAP:body use="literal"/>
      </output>
    </operation>
    <operation name="CreateTopology">
      <SOAP:operation soapAction="http://www.ICLNBIDataService.com/CreateTopology"/>
      <input>
        <SOAP:body use="literal"/>
      </input>
      <output>
        <SOAP:body use="literal"/>
      </output>
    </operation>
    <operation name="DeleteTopology">
      <SOAP:operation soapAction="http://www.ICLNBIDataService.com/DeleteTopology"/>
      <input>
        <SOAP:body use="literal"/>
      </input>
      <output>
        <SOAP:body use="literal"/>
      </output>
    </operation>
    <operation name="UpdateTopology">
      <SOAP:operation soapAction="http://www.ICLNBIDataService.com/UpdateTopology"/>
      <input>
        <SOAP:body use="literal"/>
      </input>
      <output>
        <SOAP:body use="literal"/>
      </output>
    </operation>
    <operation name="IdentifyPort">
      <SOAP:operation soapAction="http://www.ICLNBIDataService.com/IdentifyPort"/>
      <input>
        <SOAP:body use="literal"/>
      </input>
      <output>
        <SOAP:body use="literal"/>
      </output>
    </operation>
    <operation name="ValidationResource">
      <SOAP:operation soapAction="http://www.ICLNBIDataService.com/ValidationResource"/>
      <input>
        <SOAP:body use="literal"/>
      </input>
      <output>
        <SOAP:body use="literal"/>
      </output>
    </operation>
    <operation name="CreateSTag">
      <SOAP:operation soapAction="http://www.ICLNBIDataService.com/CreateSTag"/>
      <input>
        <SOAP:body use="literal"/>
      </input>
      <output>
        <SOAP:body use="literal"/>
      </output>
    </operation>
  </binding>
  <service name="ICL2NBIDataServiceService">
    <port binding="wsdltns:ICLNBIDataServiceBinding" name="ICLNBIDataServicePort">
      <SOAP:address location="http://iclsmxtest.test.intranet:10001/icl/services/ICL_2_0"/>
    </port>
  </service>
</definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>http://iclsmxtest.test.intranet:10001/icl/services/ICL_2_0?xsd=ICL_V2.23.xsd</con:url><con:content><![CDATA[<!--edited with XMLSpy v2013 rel. 2 sp2 (x64) (http://www.altova.com) by Krishna Reddy Gaddamu (Centurylink)-->
<!--================================================-->
<!--This file was generated by Progress DataXtend SI-->
<!--================================================-->
<!--!   ICL version 3.0 XSDs which is based on CIM 2.0                      !-->
<!--!   This file includes all the requirements of Aug-13 release            !-->
<!--!   Date = Mar-19-2013           any further changes will have review !-->
<!--!   of the changes done ( class and attributeNames) and listed on  !-->
<!--!   this block.                                                                             !-->
<!--================================================-->
<!--!  Date = May-21-2013                                                               !-->
<!--! New Operation Added for deleteCircuit, deleteDevice,                 !-->
<!--! deleteLocation, createParty, updateParty and deleteParty,         !-->
<!--! CalendarAvailability, TelephoneNumber, EmailContact,PartyRoleCategory,  !-->
<!--! Added elements to Customer, CustomerAgent, InvolvementRole, !-->
<!--! ValidationCondition																	 !-->
<!--================================================-->
<!--!  Date = Dec-02-2013                                                               !-->
<!--! New class added for Protocol					rfs needs customer	!-->
<!--! LIMS model 																			!-->
<!--! Mef related classes																!-->
<!--================================================-->
<!--================================================-->
<!--!  Date = May-16-2014                                                             !-->
<!--! Added Resource Notification Operation !-->
<!--================================================-->
<!--================================================-->
<!--!  Date = May-23-2014                                                             !-->
<!--!  Added maxoccurs = unbounded of ResourceCharValueReferences           !-->
<!--================================================-->
<!--================================================-->
<!--!  Date = May-25-2014                                                             !-->
<!--!  Added Pagination 															        !-->
<!--================================================-->
<!--================================================-->
<!--!  Date = June-02-2014                                                             !-->
<!--Added AddressRole,latitude and longitude as part of CLC mapping requirement AUC237530-->
<!--================================================-->
<!--================================================-->
<!--!  Date = July-08-2014                                                             !-->
<!--!  Added totalRecords in Pagination 		CCB#368				        !-->
<!--================================================-->
<!--================================================-->
<!--!  Date = July-10-2014                                                             !-->
<!--Added QoS in CTP (to represent VLI port) and  CreationDate and ModificationDate in Resource as part of EVC/OVC membership requirement AUC260563-->
<!--================================================-->
<!--!  Date = July-23-2014                                                             !-->
<!--Added CosID and CosValue under QoSBandwidth section as part of R6 NIC AUC260567. Also updated profileparameters with "CoS"-->
<!--================================================-->
<!--================================================-->
<!--!  Date = July-31-2014                                                             !-->
<!--Added AffectedServiceTypeList as part of R6 NIC Alarm Enrichment AUC244952, AUC244953-->
<!--================================================-->
<!--Date = August-5-2014                                                             !-->
<!--Version  = 2.07                                                                        !-->
<!--Added DeviceHostsService as part of R6 NIC Alarm Enrichment AUC244952, AUC244953-->
<!--Added Maintenance End Point : R6 : NIC : Circuit/Service Modeling AUC263845-->
<!--================================================-->
<!--Date = August-8-2014                                                             !-->
<!--Version  = 2.08                                                                        !-->
<!--Moved Maintenance End Point : R6 : NIC : Circuit/Service Modeling AUC263845 under CTP-->
<!--================================================-->
<!--Date = August-11-2014                                                             !-->
<!--Version  = 2.09                                                                        !-->
<!--Removed DeviceHostsService since AffectedServiceTypeList will be used to represent service types on Resource as part of R6 NIC Alarm Enrichment AUC244952, AUC244953-->
<!--================================================-->
<!--Date = August-12-2014                                                              !-->
<!--Version  = 2.10                   														 !-->
<!--Release : R6 : November 2014                                                    !-->
<!--Caliber Progarm : NIC                                                                !-->
<!--AUC Reference : AUC260567                                                     !-->
<!--AUC Name : Update Membership                                               !-->
<!--Added Operations UpdateTerminationPointRequest and 	     UpdateTerminationPointResponse                                                    !-->
<!--Added TerminationPoint under ResourceRelationship                   !-->
<!--================================================-->
<!--================================================-->
<!--Date = August-26-2014                                                             !-->
<!--Version  = 2.11                                                                      !-->
<!--Release : R2 : November 2014                                                    !-->
<!--Caliber Program : GPON - CR4701                                                                !-->
<!--AUC Reference/Impact : AUC257982, AUC257952, AUC257953, AUC257954, AUC246947 !-->
<!--AUC Name : Search, Create, Modify, Remove ServiceArea in CLC and Enhance Create   	Device in ICL !-->
<!--Description of changes:-->
<!--1. Added AddressDetails under ResourceRelationship class to associate Service addressed to a Serving Area-->
<!--2. Added AssociatedTopology (extending class : SubNetworkConnection) under PhysicalDevice class to support associating device to 1 or any topologies   
      3.Added maxoccurs = unbounded for Device Entity in CreateDeviceRequest and 	         CreateDeviceResponse operation                                        !-->
<!--================================================-->
<!--Date = September-10-2014                                                             !-->
<!--Version  = 2.12                                                                      !-->
<!--Release Impact : R2 : November 2014                                                    !-->
<!--Caliber Program : GPON - CR4701                                                                !-->
<!--AUC Reference/Impact : AUC243452, AUC275720 !-->
<!--AUC Name : Create Service &#226;&#128;&#147; HSI, Create Service &#226;&#128;&#147; IPTV !-->
<!--Description of changes:-->
<!--1. Added AddressDetails under SubNetworkConnection class to associate Service address to a Service in the similar way we do it for UNI Circuit today to standardise this relationship across Services-->
<!--================================================-->
<!--Date = September-16-2014                                                             !-->
<!--Version  = 2.12                                                                      !-->
<!--Release Impact : R6 : November 2014                                                    !-->
<!--Caliber Program : NIC                                                                 !-->
<!--AUC Reference/Impact : AUC290227, AUC275720 !-->
<!--AUC Name : Search Service &#226;&#128;&#147; HSI, Search Route &#226;&#128;&#147; HSI !-->
<!--Description of changes:-->
<!--1. Defined elements : TransportType and TransmissionType-->
<!--2. Added TransportTypes and TransmissionRate under SubNetworkConnection and TopologicalLink-->
<!--3. As part of Review call removed maxoccurs for below
		a. TerminationPoint -> AccessPointAddress-->
<!--================================================-->
<!--Date = September-29-2014                                                             !-->
<!--Version  = 2.13                                                                      !-->
<!--Release Impact : R6 : November 2014                                                    !-->
<!--Description of changes:-->
<!--Due to implementation issue, reverted back maxoccurs = unbounded for below  !-->
<!--a. TerminationPoint -> AccessPointAddress-->
<!--================================================-->
<!--Date = December-17-2014                                                             !-->
<!--Version  = 2.13                                                                      !-->
<!--Release Impact : R7 : Feb 2015                                                    !-->
<!--Description of changes: CR4701 Cupic Access : SR340924-->
<!--1. Change : Update location request maxoccurs for address details to unbounded  !-->
<!--Description of changes: NIC R7.0 Number Management : AUC341716-->
<!--1. Change : Added element NumberObject of type LogicalResource  !-->
<!--2. Change : Added NumberObject related operations (Consume and Release)  !-->
<!--================================================-->
<!--Date = December-31-2014                                                             !-->
<!--Version  = 2.14                                                                     !-->
<!--Release Impact : R7 : Feb 2015                                                    !-->
<!--Description of changes: CR4701 Cupic Access : SR340924-->
<!--1. Change :Commented (removed) the change on location request maxoccurs for address details which was made unbounded as the requirement got pushed to May 2015 !-->
<!--================================================-->
<!--Date = Feb-2015                                                             !-->
<!--Version  = 2.15 																!-->
<!--Release Impact : R8 : May 2015  										!-->
<!--Description of changes: CR4594 Lion : AUC349873-->
<!--1. Change : Added aliasName, aliasName2, CreationDate, ModificationDate, functionalStatus and Remarks to Service !-->
<!--Description of change across programs-->
<!--The multiple ICL xsds across programs are consolidated to make one across various projects/CRs to implement a single source solution !-->
<!--================================================-->
<!--Date = March-02-2015                                                             !-->
<!--Version  = 2.16                                                                     !-->
<!--Release Impact : May 2015                                                    !-->
<!--Description of changes: CR4701 Cupic Access : AUC340931, SR340924-->
<!--1. Change: Set the maxOccurs=unbound for CharacteristicValueReferences (under complex object <CharacteristicValue>) to allow for grouping a set of street information under one Characteristic on the request  !-->
<!--2. Change: Increased the range of Service address complex object allowed in the input for UpdateLocation operations   !-->
<!--================================================-->
<!--Date = March-12-2015                                                             !-->
<!--Version  = 2.17                                                                     !-->
<!--Release Impact : May 2015                                                    !-->
<!--Description of changes: CR4701 Cupic Access : AUC340931, SR340924-->
<!--Reverted back the below change  !-->
<!--Change was: Increased the range of Service address complex object allowed in the input for UpdateLocation operations   !-->
<!--================================================-->
<!--Date = April-09-2015                                                             !-->
<!--Version  = 2.18                                                                     !-->
<!--Release Impact : May 2015                                                    !-->
<!--Description of changes: CR4594 : AUC349896, AUC349879, AUC9872-->
<!--Reverted back the below change  !-->
<!--Change was: Added the complex object Service under ResourceRelationship to associate Circuits to Service   !-->
<!--================================================-->
<!--================================================-->
<!--Date = July-27-2015                                                             !-->
<!--Version  = 2.19                                                                     !-->
<!--Release Impact : November 2015                                          !-->
<!--Description of changes:  CR4594-AUC393816,  CR5435-ICL-Get Circuit Response-OFFNET INDICATOR-->
<!--Change was: Added the simple object apsProtocolType under UNICIRCUIT and SubNetworkConnection to support the Protection Protocol for the ENNI Service   !-->
<!--Change was: Added the simple object specificationCode under SubNetworkConnection to support the Spec Code for Circuit   !-->
<!--================================================-->
<!--================================================-->
<!--Date = September-15-2015                                                             !-->
<!--Version  = 2.19                                                                     !-->
<!--Release Impact : Nov 2015                                                    !-->
<!--Description of changes: US19252- Create VPN in LIMS-->
<!--Reverted back the below change  !-->
<!--Change was: Added the two new complex object CreateCugRequest and CreateCugResponse to support the creation of VPN!-->
<!--================================================-->
<!--================================================-->
<!--================================================-->
<!--Date = October-29-2015                                                             !-->
<!--Version  = 2.19                                                                          !-->
<!--Release Impact :                                                                        !-->
<!--Description of changes:  US406896  ICL/DSP Enhance Revert UNI-->
<!--Change was: Added the simple object revertive under TopologicalLink  to support SOOL Revert issue’-->
<!--================================================-->
<!--================================================-->
<!--Date = November-11-2015                                                             !-->
<!--Version  = 2.19                                                                          !-->
<!--Release Impact :                                                                        !-->
<!--Description of changes:  US406085  Add aliasname under MEP-->
<!--Change was: Added the simple object aliasname under MaintenanceEndPoint-->
<!--================================================-->
<!--================================================-->
<!--Date = March-31-2016                                                             !-->
<!--Version  = 2.19                                                                          !-->
<!--Release Impact :                                                                        !-->
<!--Model Changes for Enhanced Error Handeling-->
<!--Change was: Added the simple elemet ErrorDeveloperMessage under ErrorList-->
<!--Change was: Added the Two complex elment AdditionalContext and MetaData under ErrorList-->
<!--================================================-->
<!--================================================-->
<!--Date = May-09-2016                                                                  !-->
<!--Version  = 2.20                                                                         !-->
<!--Release Impact : June-2016                                                       !-->
<!--Change Was added Three new services as part of the NIC GPON June - F5476-->
<!--CreateObjectImageRequest, CreateObjectImageResponse-->
<!--RestoreObjectImageRequest, RestoreObjectImageResponse-->
<!--DeleteObjectImageRequest, DeleteObjectImageResponse-->
<!--================================================-->
<!--================================================-->
<!--Date = June-02-2016                                                                  !-->
<!--Version  = 2.20                                                                          !-->
<!--Release Impact : Aug-2016                                                        !-->
<!--Change Was added One new service as part of the NIC RRD August - US54223-->
<!--GenerateMCORequest, GenerateMCOResponse-->
<!--================================================-->
<!--================================================-->
<!--Date = June-21-2016                                                                  !-->
<!--Version  = 2.20                                                                          !-->
<!--Release Impact : Aug-2016                                                         !-->
<!--Change Was added Three new services as part of the NIC NACKS August - US68862-->
<!--CreateTopologyRequest, CreateTopologyResponse-->
<!--DeleteTopologyRequest, DeleteTopologyResponse-->
<!--UpdateTopologyRequest, UpdateTopologyResponse-->
<!--Added one attribute Topology in SearchResponseDetails to support topology search-->
<!--================================================-->
<!--================================================-->
<!--Date = September-28-2016                                                                  !-->
<!--Version  = 2.21                                                                          !-->
<!--Release Impact : Nov-2016                                                         !-->
<!--Change Was added One new services as part of the LION November - US89322-->
<!--IdentifyPortRequest, IdentifyPortResponse-->
<!--================================================-->
<!--================================================-->
<!--Date = October-3-2016                                                                  !-->
<!--Version  = 2.21                                                                          !-->
<!--Release Impact : Nov-2016                                                         !-->
<!--Change Was added One new services as part of the NIC Ethernet November - US102386-->
<!--ValidationResourceRequest, ValidationResourceResponse-->
<!--================================================-->
<!--================================================-->
<!--Date = Jan-30-2017                                                                  !-->
<!--Version  = 2.22                                                                          !-->
<!--Release Impact : March-2017                                                         !-->
<!--Change Was added to support EVCRestoreImage in RestoreObjectImageRequest for the LION March - US126400-->
<!--ValidationResourceRequest, ValidationResourceResponse-->
<!--================================================-->
<!--================================================-->
<!--Date = May-25-2017                                                                  !-->
<!--Version  = 2.23                                                                          !-->
<!--Release Impact : August-2017                                                         !-->
<!--Change Was added to support Route in EVCCircuit for the LION Aug - US150449 && US150451-->
<!--Change was added to support Route in ResourceRelationship for the LION Aug US150449 && US150451-->
<!--CreateSTagRequest, CreateSTagResponse-->
<!--================================================-->
<!--================================================-->
<!--Date = June-28-2017                                                                  !-->
<!--Version  = 2.23                                                                          !-->
<!--Release Impact : August-2017                                                         !-->
<!--Adding ConsistsOfSlot to Card for US156466 							!-->
<!--================================================-->
<xs:schema attributeFormDefault="unqualified" elementFormDefault="unqualified" targetNamespace="http://www.ICLNBI.com/ICLNBI_V2.00.xsd" xmlns:tns="http://www.ICLNBI.com/ICLNBI_V2.00.xsd" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.AbstractGeographicAddress-->
  <xs:element name="AbstractGeographicAddress" type="tns:AbstractGeographicAddress"/>
  <xs:complexType name="AbstractGeographicAddress">
    <xs:complexContent>
      <xs:extension base="tns:GeographicPlace">
        <xs:sequence/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.ActualState-->
  <xs:simpleType name="ActualState">
    <xs:restriction base="xs:string">
      <xs:enumeration value="ACTIVE"/>
      <xs:enumeration value="INACTIVE"/>
      <xs:enumeration value="PARTIAL"/>
    </xs:restriction>
  </xs:simpleType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.AmericanPropertyAddress-->
  <xs:element name="AmericanPropertyAddress" type="tns:AmericanPropertyAddress"/>
  <xs:complexType name="AmericanPropertyAddress">
    <xs:complexContent>
      <xs:extension base="tns:UrbanPropertyAddress">
        <xs:sequence>
          <xs:element minOccurs="0" name="streetNrFirstPrefix" type="xs:string"/>
          <xs:element minOccurs="0" name="streetNrLastPrefix" type="xs:string"/>
          <xs:element minOccurs="0" name="streetNamePrefix" type="xs:string"/>
          <xs:element minOccurs="0" name="streetNameSuffix" type="xs:string"/>
          <xs:element minOccurs="0" name="AddressLine1" type="xs:string"/>
          <xs:element minOccurs="0" name="AddressLine2" type="xs:string"/>
          <xs:element minOccurs="0" name="AddressLine3" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="InvolvedParty" type="tns:Party"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.ContactMedium-->
  <xs:element name="ContactMedium" type="tns:ContactMedium"/>
  <xs:complexType name="ContactMedium">
    <xs:sequence>
      <xs:element minOccurs="0" name="type" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.TelephoneNumber-->
  <xs:element name="TelephoneNumber" type="tns:TelephoneNumber"/>
  <xs:complexType name="TelephoneNumber">
    <xs:complexContent>
      <xs:extension base="tns:ContactMedium">
        <xs:sequence>
          <xs:element minOccurs="0" name="ISDCode" type="xs:string"/>
          <xs:element minOccurs="0" name="number" type="xs:string"/>
          <xs:element minOccurs="0" name="extension" type="xs:string"/>
          <xs:element minOccurs="0" name="passcode" type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.EmailContact-->
  <xs:element name="EmailContact" type="tns:EmailContact"/>
  <xs:complexType name="EmailContact">
    <xs:complexContent>
      <xs:extension base="tns:ContactMedium">
        <xs:sequence>
          <xs:element minOccurs="0" name="eMailAddress" type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.FaxNumber-->
  <xs:element name="FaxNumber" type="tns:FaxNumber"/>
  <xs:complexType name="FaxNumber">
    <xs:complexContent>
      <xs:extension base="tns:ContactMedium">
        <xs:sequence>
          <xs:element minOccurs="0" name="number" type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.CalendarEntry-->
  <xs:element name="CalendarEntry" type="tns:CalendarEntry"/>
  <xs:complexType name="CalendarEntry">
    <xs:sequence>
      <xs:element minOccurs="0" name="TimeZone" type="tns:TimeZone"/>
    </xs:sequence>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.TimeZone-->
  <xs:element name="TimeZone" type="tns:TimeZone"/>
  <xs:complexType name="TimeZone">
    <xs:sequence>
      <xs:element minOccurs="0" name="name" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.CalendarActionEntry-->
  <xs:element name="CalendarActionEntry" type="tns:CalendarActionEntry"/>
  <xs:complexType name="CalendarActionEntry">
    <xs:complexContent>
      <xs:extension base="tns:CalendarEntry">
        <xs:sequence>
          <xs:element minOccurs="0" name="priority" type="xs:string"/>
          <xs:element minOccurs="0" name="Place" type="tns:Place"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.CalendarAvailability-->
  <xs:element name="CalendarAvailability" type="tns:CalendarAvailability"/>
  <xs:complexType name="CalendarAvailability">
    <xs:complexContent>
      <xs:extension base="tns:CalendarActionEntry">
        <xs:sequence>
          <xs:element minOccurs="0" name="type" type="xs:string"/>
          <xs:element minOccurs="0" name="method" type="xs:string"/>
          <xs:element minOccurs="0" name="methodAvailability" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="availability" type="tns:Availability"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.Availability-->
  <xs:element name="Availability" type="tns:Availability"/>
  <xs:complexType name="Availability">
    <xs:sequence>
      <xs:element minOccurs="0" name="StartTime" type="xs:string"/>
      <xs:element minOccurs="0" name="EndTime" type="xs:string"/>
      <xs:element minOccurs="0" name="Day" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.Condition-->
  <xs:element name="Condition" type="tns:Condition"/>
  <xs:complexType name="Condition">
    <xs:sequence>
      <xs:element minOccurs="0" name="VariableName" type="xs:string"/>
      <xs:element minOccurs="0" name="Value" type="xs:string"/>
      <xs:element minOccurs="0" name="OtherValue" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.ValidationCondition-->
  <xs:element name="ValidationCondition" type="tns:ValidationCondition"/>
  <xs:complexType name="ValidationCondition">
    <xs:sequence>
      <xs:element minOccurs="0" name="operator" type="xs:string"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="equalCondition" type="tns:Condition"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="notEqualCondition" type="tns:Condition"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="likeCondition" type="tns:Condition"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="betweenCondition" type="tns:Condition"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="innerCondition" type="tns:ValidationCondition"/>
    </xs:sequence>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.ValidationRule-->
  <xs:element name="ValidationRule" type="tns:ValidationRule"/>
  <xs:complexType name="ValidationRule">
    <xs:complexContent>
      <xs:extension base="tns:RootEntity">
        <xs:sequence>
          <xs:element minOccurs="0" name="operation" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ValidationCondition" type="tns:ValidationCondition"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.CalendarPartyRole-->
  <xs:element name="CalendarPartyRole" type="tns:CalendarPartyRole"/>
  <xs:complexType name="CalendarPartyRole">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="CalendarAvailability" type="tns:CalendarAvailability"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="Source" type="tns:Resource"/>
    </xs:sequence>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.Card-->
  <xs:element name="Card" type="tns:Card"/>
  <xs:complexType name="Card">
    <xs:annotation>
      <xs:documentation>This is based on the DEN Card class. It is defined as follows:

This class represents a type of physical container that can be plugged into a Slot. It may represent a primary function (e.g., a networking card) or an auxiliary function (e.g., a memory card) that supports another card. All objects of this type are capable of carrying electrical and/or optical signals. They also provide a mounting point for other types of ManagedePhysicalElements, such as Chips or Cards.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:Equipment">
        <xs:sequence>
          <xs:element minOccurs="0" name="cardCompatibilityResults" type="xs:string">
            <xs:annotation>
              <xs:documentation>This is an attribute that is used to store the result of the negotiation process between a Card and its EquipmentHolder to see if they are compatible. This is the result of the isCompatible() method, with the Card being the source and the EquipmentHolder being the target, translated into a textual description.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="daughterCardInstallStatus" type="xs:int">
            <xs:annotation>
              <xs:documentation>This is an enumerated integer that defines the current installation status of this Card's daughter Cards. Note that this defines the status of daughter Cards as viewed by the hosting Card. Status values of individual daughter Cards are defined by attributes in the daughter card itself. Values include:

 0: Not Applicable (doesn't have any DaughterCards)
 1: All Daughter Cards are installed
 2: Some Daughter Cards are installed
 3: No Daughter Cards are installed</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="daughterCardOperatingStatus" type="xs:int">
            <xs:annotation>
              <xs:documentation>This is an enumerated integer that defines the current operating status of this Card's daughter Cards. Note that this defines the operating status of daughter Cards as viewed by the hosting Card. Status values of individual daughter Cards are defined by attributes in the daughter card itself. 

This attribute only defines the physical operating characteristics of the daughter card. It does not say whether the daughter Card is functioning correctly, as that is a logical attribute.

Values include:

 0: Not Applicable (doesn't have any DaughterCards)
 1: All Daughter Cards are operating correctly
 2: Some Daughter Cards are operating incorrectly
 3: No Daughter Cards are operating correctly</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="daughterCardRequirements" type="xs:int">
            <xs:annotation>
              <xs:documentation>This is an enumerated integer that defines the relationship between this Card and all DaughterCards. Values include:

 1: No DaughterCard can be attached
 2: Requires 1 or more DaughterCards to function correctly
 3: Can optionally use 1 or more DaughterCards</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="isConfigurablePhysically" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This is a boolean attribute that, if TRUE, indicates that this Card has one or more options that can be physically configured. Each of these options has a distinct physical manifestation (e.g., additional memory, or faster CPU) that usually (but not always) results in occupying more room in the Card.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="isMotherBoard" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This is a Boolean attribute that, if TRUE, defines this Card as either a motherboard or another type of hosting board. When FALSE, it isn't.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="isUniquePhysical" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This is a boolean attribute that, if TRUE, defines this Card to be physically different from other Cards of the same type and therefore requires a special slot. The unique aspects of this Card are described in the UniqueRequirementsPhysical attribute. An example might be a different form factor than other Cards of its type, or the ability to set jumpers on the Card to control its functionality (e.g., clocking).</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="maxDataWidth" type="xs:int">
            <xs:annotation>
              <xs:documentation>This is an integer that defines the maximum bus width of this Card. Values include:

 0: Unknown
 1: Special
 8: 8 bit data bus
 16: 16 bit data bus
 24: 24 bit data bus
 32: 32 bit data bus
 64: 64 bit data bus
 128: 128 bit data bus

The value "1" can be used for any non-standard data bus width.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="slotLayout" type="xs:string">
            <xs:annotation>
              <xs:documentation>This is a free-form string that describes the positioning, spacing, typical usage, restrictions, and any other pertinent information that defines how the Card is to be positioned into the Slot.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="slotsRequired" type="xs:int">
            <xs:annotation>
              <xs:documentation>This is an integer that defines the number of slots required to hold this Card. Since this is usually 1, that value is assigned as its default value.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="uniqueRequirementsPhysical" type="xs:string">
            <xs:annotation>
              <xs:documentation>This is a free-form string that contains the physically unique requirements of this Card. For example, it must go in a certain slot number because it has special dimensions. This attribute should only be filled in if the value of the IsUniquePhysical attribute is TRUE; otherwise, it should be NULL.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="hardwareVersion" type="xs:string">
            <xs:annotation>
              <xs:documentation>This is a string attribute that contains the hardware version number of this Card.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="markedForDeletion" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ConsistsOfSlot" type="tns:Slot"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="PhysicalPort" type="tns:PhysicalPort"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="IPAddress" type="tns:IPAddress"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="CardOnCardDetails" type="tns:CardOnCardDetails"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="AllowableCardOnCardDetails" type="tns:CardOnCardDetails"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.CardOnCardDetails-->
  <xs:element name="CardOnCardDetails" type="tns:CardOnCardDetails"/>
  <xs:complexType name="CardOnCardDetails">
    <xs:complexContent>
      <xs:extension base="tns:Entity">
        <xs:sequence>
          <xs:element minOccurs="0" name="isPluggable" type="xs:boolean"/>
          <xs:element minOccurs="0" name="slotNumber" type="xs:int"/>
          <xs:element minOccurs="0" name="portNumber" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="Card" type="tns:Card"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.CharacteristicValue-->
  <xs:element name="CharacteristicValue" type="tns:CharacteristicValue"/>
  <xs:complexType name="CharacteristicValue">
    <xs:annotation>
      <xs:documentation>A value of a CharacteristicSpecifcation chosen or entered (if no values are specified) for a Entity that further defines what the Entity is.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="characteristicName" type="xs:string"/>
      <xs:element minOccurs="0" name="characteristicValue" type="xs:string"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="value" type="xs:string">
        <xs:annotation>
          <xs:documentation>A fact that describes a Entity.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="CharacteristicValueReferences" type="tns:CharacteristicValue"/>
    </xs:sequence>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.CoSBundle-->
  <xs:element name="CoSBundle" type="tns:CoSBundle"/>
  <xs:complexType name="CoSBundle">
    <xs:complexContent>
      <xs:extension base="tns:ServiceBundle">
        <xs:sequence>
          <xs:element minOccurs="0" name="LOSName" type="xs:string"/>
          <!--Added for R6 : NIC : AUC260567 Start-->
          <xs:element minOccurs="0" name="CosID" type="xs:string"/>
          <xs:element minOccurs="0" name="CosValue" type="xs:string"/>
          <!--Added for R6 : NIC : AUC260567 End-->
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ProfileParameters" type="tns:BandwidthProfile"/>
          <xs:element minOccurs="0" name="P1" type="tns:Priority"/>
          <xs:element minOccurs="0" name="P2" type="tns:Priority"/>
          <xs:element minOccurs="0" name="P3" type="tns:Priority"/>
          <xs:element minOccurs="0" name="P4" type="tns:Priority"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.TransportType-->
  <xs:element name="TransportTypes" type="tns:TransportType"/>
  <xs:complexType name="TransportType">
    <xs:complexContent>
      <xs:extension base="tns:ServiceBundle">
        <xs:sequence>
          <xs:element minOccurs="0" name="isCurrentFlag" type="xs:string"/>
          <xs:element minOccurs="0" name="isSONETFlag" type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.TransmissionType-->
  <xs:element name="TransmissionType" type="tns:TransmissionType"/>
  <xs:complexType name="TransmissionType">
    <xs:complexContent>
      <xs:extension base="tns:ServiceBundle">
        <xs:sequence>
          <xs:element minOccurs="0" name="interfaceCategory" type="xs:string"/>
          <xs:element minOccurs="0" name="isCurrentFlag" type="xs:string"/>
          <xs:element minOccurs="0" name="isSONETFlag" type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.Priority-->
  <xs:element name="Priority" type="tns:Priority"/>
  <xs:complexType name="Priority">
    <xs:complexContent>
      <xs:extension base="tns:Entity">
        <xs:sequence>
          <xs:element minOccurs="0" name="value" type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.CompositeEntityIdentification-->
  <xs:element name="CompositeEntityIdentification" type="tns:CompositeEntityIdentification"/>
  <xs:complexType name="CompositeEntityIdentification">
    <xs:annotation>
      <xs:documentation>A type of EntityIdentification that is formed by aggregating other EntityIdentifications, which may be Composite or Atomic EntityIdentifications.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:EntityIdentification">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="CompositeEntityIdentityComposedOf" type="tns:EntityIdentification"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.ConnectionDirection-->
  <xs:simpleType name="ConnectionDirection">
    <xs:restriction base="xs:string">
      <xs:enumeration value="BIDIRECTIONAL"/>
      <xs:enumeration value="UNIDIRECTIONAL"/>
    </xs:restriction>
  </xs:simpleType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.ConnectionTerminationPoint-->
  <xs:element name="ConnectionTerminationPoint" type="tns:ConnectionTerminationPoint"/>
  <xs:complexType name="ConnectionTerminationPoint">
    <xs:annotation>
      <xs:documentation>This object class is an actual or potential end point of a Subnetwork Connection or Flow Domain Fragment. For example, the ConnectionTerminationPoint (CTP) can represent a logical channel or a timeslot on a physical link. 
Note regarding naming: 
Wherever multiple layers are applicable to a particular CTP, the connectable layer is used as a basis for the name. 
When the CTP has no connectable layer, any layer that ensures name unicity can be used. 
See R_TMF518_NRF_I_0009 and R_TMF518_NRF_I_0010. 
For Flow Points in connectionless networks see R_TMF518_NRF_I_0018.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:TerminationPoint">
        <xs:sequence>
          <xs:element minOccurs="0" name="ctpState" type="tns:TerminationPointConnectionState">
            <xs:annotation>
              <xs:documentation>The values that this attribute may take are constrained by the value of the "direction" attribute of the CTP. There is also a dependency on the value of the "tpMappingMode" attribute of the CTP. 
See R_TMF518_NRF_I_0037.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="MappingMode" type="tns:TerminationMode">
            <xs:annotation>
              <xs:documentation>Within the façade definition, the CTP/FTP can act as an aggregate of associated G.805 TCPs, G.805 Termination Functions and G.805 CPs at one or more LayerRates. The CTP is contained within a PTP or FTP. The tpMappingMode attribute indicates and controls the connection of the named CP at a specified LayerRate to the dedicated G.805 TCP and associated G.805 Termination Function at the same LayerRate within the CTP/FTP.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="supportedConnectionRates" type="xs:string"/>
          <xs:element minOccurs="0" name="CTPsInCTP" type="tns:ConnectionTerminationPoint"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ConnectionTerminationPointContains" type="tns:ConnectionTerminationPoint"/>
          <!--Added QoS in CTP (to represent VLI port) as part of EVC/OVC membership requirement AUC260563-->
          <xs:element maxOccurs="unbounded" minOccurs="0" name="QoSBandwidth" type="tns:CoSBundle"/>
          <!--Added Maintenance End Point : R6 : NIC : Circuit/Service Modeling AUC263845-->
          <xs:element minOccurs="0" name="MaintenanceEndPoint" type="tns:MaintenanceEndPoint"/>
          <!--Rashmi added for Lion Flow Points Starts-->
          <xs:element minOccurs="0" name="FdfrHasAEndFps" type="tns:FlowDomainFragment"/>
          <xs:element minOccurs="0" name="FdfrHasZEndFps" type="tns:FlowDomainFragment"/>
          <xs:element minOccurs="0" name="MfdfrHasAEndFps" type="tns:MatrixFlowDomainFragment"/>
          <xs:element minOccurs="0" name="MfdfrHasZEndFps" type="tns:MatrixFlowDomainFragment"/>
          <!--Rashmi added for Lion Flow PointsEnds-->
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.ControlState-->
  <xs:simpleType name="ControlState">
    <xs:restriction base="xs:string">
      <xs:enumeration value="LOCKED"/>
      <xs:enumeration value="UNLOCKED"/>
    </xs:restriction>
  </xs:simpleType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.Country-->
  <xs:element name="Country" type="tns:Country"/>
  <xs:complexType name="Country">
    <xs:annotation>
      <xs:documentation>This is an example of a concrete Geographic Location entity.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:GeographicLocation">
        <xs:sequence>
          <xs:element minOccurs="0" name="name" type="xs:string">
            <xs:annotation>
              <xs:documentation>the name that the Country is known by</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="Iso2Code" type="xs:string">
            <xs:annotation>
              <xs:documentation>ISO 2 letter country abbreviation</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="Iso3Code" type="xs:string">
            <xs:annotation>
              <xs:documentation>ISO 3 letter country abbreviation</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="type" type="xs:string">
            <xs:annotation>
              <xs:documentation>the type of country</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: iclnbi.com.iclnbi.iclnbi.ResourceNotification-->
  <xs:element name="ResourceNotification" type="tns:ResourceNotification"/>
  <xs:complexType name="ResourceNotification">
    <xs:complexContent>
      <xs:extension base="tns:OperationResponse">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ResourceNotificationDetails" type="tns:SearchResponseDetails"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--*******NIC GPON June - F5476*******-->
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.CreateObjectImageRequest-->
  <xs:element name="CreateObjectImageRequest" type="tns:CreateObjectImageRequest"/>
  <xs:complexType name="CreateObjectImageRequest">
    <xs:complexContent>
      <xs:extension base="tns:OperationRequest">
        <xs:sequence>
          <xs:element minOccurs="0" name="Object" type="tns:Resource"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--*******NIC GPON June - F5476*******-->
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.CreateOrderImageResponse-->
  <xs:element name="CreateObjectImageResponse" type="tns:CreateObjectImageResponse"/>
  <xs:complexType name="CreateObjectImageResponse">
    <xs:complexContent>
      <xs:extension base="tns:OperationResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="Object" type="tns:Resource"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--*******NIC GPON June - F5476*******-->
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.RestoreObjectImageRequest-->
  <xs:element name="RestoreObjectImageRequest" type="tns:RestoreObjectImageRequest"/>
  <xs:complexType name="RestoreObjectImageRequest">
    <xs:complexContent>
      <xs:extension base="tns:OperationRequest">
        <xs:sequence>
          <xs:element minOccurs="0" name="Object" type="tns:Resource"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--*******NIC GPON June - F5476*******-->
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.RestoreObjectImageResponse-->
  <xs:element name="RestoreObjectImageResponse" type="tns:RestoreObjectImageResponse"/>
  <xs:complexType name="RestoreObjectImageResponse">
    <xs:complexContent>
      <xs:extension base="tns:OperationResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="Object" type="tns:Resource"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--*******NIC GPON June - F5476*******-->
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.RestoreObjectImageRequest-->
  <xs:element name="DeleteObjectImageRequest" type="tns:DeleteObjectImageRequest"/>
  <xs:complexType name="DeleteObjectImageRequest">
    <xs:complexContent>
      <xs:extension base="tns:OperationRequest">
        <xs:sequence>
          <xs:element minOccurs="0" name="Object" type="tns:Resource"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--*******NIC GPON June - F5476*******-->
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.DeleteObjectImageResponse-->
  <xs:element name="DeleteObjectImageResponse" type="tns:DeleteObjectImageResponse"/>
  <xs:complexType name="DeleteObjectImageResponse">
    <xs:complexContent>
      <xs:extension base="tns:OperationResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="Object" type="tns:Resource"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--*******LION MEF Services Begins*******-->
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.CreateServiceRequest-->
  <xs:element name="CreateServiceRequest" type="tns:CreateServiceRequest"/>
  <xs:complexType name="CreateServiceRequest">
    <xs:complexContent>
      <xs:extension base="tns:OperationRequest">
        <xs:sequence>
          <xs:element minOccurs="0" name="Service" type="tns:Service"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.CreateServiceResponse-->
  <xs:element name="CreateServiceResponse" type="tns:CreateServiceResponse"/>
  <xs:complexType name="CreateServiceResponse">
    <xs:complexContent>
      <xs:extension base="tns:OperationResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="Service" type="tns:Service"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.DeleteServiceRequest-->
  <xs:element name="DeleteServiceRequest" type="tns:DeleteServiceRequest"/>
  <xs:complexType name="DeleteServiceRequest">
    <xs:complexContent>
      <xs:extension base="tns:OperationRequest">
        <xs:sequence>
          <xs:element minOccurs="0" name="Service" type="tns:Service"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.DeleteServiceResponse-->
  <xs:element name="DeleteServiceResponse" type="tns:DeleteServiceResponse"/>
  <xs:complexType name="DeleteServiceResponse">
    <xs:complexContent>
      <xs:extension base="tns:OperationResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="Service" type="tns:Service"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.UpdateServiceRequest-->
  <xs:element name="UpdateServiceRequest" type="tns:UpdateServiceRequest"/>
  <xs:complexType name="UpdateServiceRequest">
    <xs:complexContent>
      <xs:extension base="tns:OperationRequest">
        <xs:sequence>
          <xs:element minOccurs="0" name="Service" type="tns:Service"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.UpdateServiceResponse-->
  <xs:element name="UpdateServiceResponse" type="tns:UpdateServiceResponse"/>
  <xs:complexType name="UpdateServiceResponse">
    <xs:complexContent>
      <xs:extension base="tns:OperationResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="Service" type="tns:Service"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.OwnsServiceDetails-->
  <xs:element name="OwnsServiceDetails" type="tns:OwnsServiceDetails"/>
  <xs:complexType name="OwnsServiceDetails">
    <xs:complexContent>
      <xs:extension base="tns:Entity">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="Customer" type="tns:Customer"/>
          <xs:element minOccurs="0" name="PartyRole" type="tns:PartyRole"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="CustomerAgent" type="tns:CustomerAgent"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--*******LION MEF Services Ends*******-->
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.CreateCircuitRequest-->
  <xs:element name="CreateCircuitRequest" type="tns:CreateCircuitRequest"/>
  <xs:complexType name="CreateCircuitRequest">
    <xs:complexContent>
      <xs:extension base="tns:OperationRequest">
        <xs:sequence>
          <xs:element minOccurs="0" name="Circuit" type="tns:SubNetworkConnection"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="P2PCircuit" type="tns:TopologicalLink"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.CreateCircuitResponse-->
  <xs:element name="CreateCircuitResponse" type="tns:CreateCircuitResponse"/>
  <xs:complexType name="CreateCircuitResponse">
    <xs:complexContent>
      <xs:extension base="tns:OperationResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="Circuit" type="tns:SubNetworkConnection"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="P2PCircuit" type="tns:TopologicalLink"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.CreateDeviceRequest-->
  <xs:element name="CreateDeviceRequest" type="tns:CreateDeviceRequest"/>
  <xs:complexType name="CreateDeviceRequest">
    <xs:complexContent>
      <xs:extension base="tns:OperationRequest">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="Device" type="tns:PhysicalDevice"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.CreateDeviceResponse-->
  <xs:element name="CreateDeviceResponse" type="tns:CreateDeviceResponse"/>
  <xs:complexType name="CreateDeviceResponse">
    <xs:complexContent>
      <xs:extension base="tns:OperationResponse">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="Device" type="tns:PhysicalDevice"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.CreateLocationRequest-->
  <xs:element name="CreateLocationRequest" type="tns:CreateLocationRequest"/>
  <xs:complexType name="CreateLocationRequest">
    <xs:complexContent>
      <xs:extension base="tns:OperationRequest">
        <xs:sequence>
          <xs:element minOccurs="0" name="AddressDetails" type="tns:AmericanPropertyAddress"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.CreateLocationResponse-->
  <xs:element name="CreateLocationResponse" type="tns:CreateLocationResponse"/>
  <xs:complexType name="CreateLocationResponse">
    <xs:complexContent>
      <xs:extension base="tns:OperationResponse">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="AddressDetails" type="tns:AmericanPropertyAddress"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.CreatePartyRequest-->
  <xs:element name="CreatePartyRequest" type="tns:CreatePartyRequest"/>
  <xs:complexType name="CreatePartyRequest">
    <xs:complexContent>
      <xs:extension base="tns:OperationRequest">
        <xs:sequence>
          <xs:element minOccurs="0" name="PartyDetails" type="tns:Party"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.CreatePartyResponse-->
  <xs:element name="CreatePartyResponse" type="tns:CreatePartyResponse"/>
  <xs:complexType name="CreatePartyResponse">
    <xs:complexContent>
      <xs:extension base="tns:OperationResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="PartyDetails" type="tns:Party"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.CrossConnect-->
  <xs:element name="CrossConnect" type="tns:CrossConnect"/>
  <xs:complexType name="CrossConnect">
    <xs:sequence>
      <xs:element minOccurs="0" name="isActive" type="xs:boolean"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="aEndTpRefList" type="xs:anySimpleType"/>
      <xs:element minOccurs="0" name="direction" type="tns:ConnectionDirection"/>
      <xs:element minOccurs="0" name="crossConnectType" type="tns:SubnetworkConnectionType"/>
      <xs:element minOccurs="0" name="isFixed" type="xs:boolean"/>
      <xs:element minOccurs="0" name="connectionId" type="xs:string"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="zEndTpRefList" type="xs:anySimpleType">
        <xs:annotation>
          <xs:documentation>This relationship contains the the Z end TP names (CTP or GTP) and represents the ends of the relationships.CcHasZEndCtps and CcHasZEndGtps.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="CcHasAEndCtps" type="tns:ConnectionTerminationPoint"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="CcHasZEndCtps" type="tns:ConnectionTerminationPoint"/>
    </xs:sequence>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.Customer-->
  <xs:element name="Customer" type="tns:Customer"/>
  <xs:complexType name="Customer">
    <xs:annotation>
      <xs:documentation>A person or organization that buys products and services from the enterprise or receives free offers or services. This is modeled as a Party playing the role of Customer. A Customer is a type of PartyRole. Customers can also be other service providers who resell the enterprises products, other service providers that lease the enterprise's resources for utilization by the other service provider's products and services, and so forth.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:PartyRole">
        <xs:sequence>
          <xs:element minOccurs="0" name="ID" type="xs:string">
            <xs:annotation>
              <xs:documentation>A unique identifier.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="customerStatus" type="xs:string">
            <xs:annotation>
              <xs:documentation>The current condition of a customer, such as active, inactive, prospective.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="ACNA" type="xs:string"/>
          <xs:element minOccurs="0" name="customerRank" type="xs:anySimpleType">
            <xs:annotation>
              <xs:documentation>Degree of importance relative to other customers.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="masterCustomerNumber" type="xs:string"/>
          <xs:element minOccurs="0" name="ICSCCode" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ContactableViaTelephoneNumber" type="tns:TelephoneNumber"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ContactableViaEmail" type="tns:EmailContact"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ContactableViaFaxNumber" type="tns:FaxNumber"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="PostalContact" type="tns:AmericanPropertyAddress"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="CustomerPosseses" type="tns:CustomerAccount"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.CustomerAccount-->
  <xs:element name="CustomerAccount" type="tns:CustomerAccount"/>
  <xs:complexType name="CustomerAccount">
    <xs:annotation>
      <xs:documentation>An arrangement that a customer has with an enterprise that provides products to the customer.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="ID" type="xs:string">
        <xs:annotation>
          <xs:documentation>A unique identifier.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="name" type="xs:string">
        <xs:annotation>
          <xs:documentation>The name of the account.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="accountType" type="xs:string">
        <xs:annotation>
          <xs:documentation>A categorization of an account, such as individual, joint, and so forth, whose instances share some of the same characteristics.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="accountStatus" type="xs:string">
        <xs:annotation>
          <xs:documentation>The condition of the account, such as due, paid, in arrears.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="creditLimit" type="xs:anySimpleType">
        <xs:annotation>
          <xs:documentation>The maximum amount of money that may be charged on a account.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="pin" type="xs:string">
        <xs:annotation>
          <xs:documentation>A multidigit personal identification numbe that is used by a Customer to gain access to a CustomerAccount at an ATM, a computer, or a telephone system, and so forth.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="IDType" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.CustomerAgent-->
  <xs:element name="CustomerAgent" type="tns:CustomerAgent"/>
  <xs:complexType name="CustomerAgent">
    <xs:complexContent>
      <xs:extension base="tns:PartyRole">
        <xs:sequence>
          <xs:element minOccurs="0" name="type" type="xs:string"/>
          <xs:element minOccurs="0" name="DRC" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ContactableViaTelephoneNumber" type="tns:TelephoneNumber"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ContactableViaEmail" type="tns:EmailContact"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ContactableViaFaxNumber" type="tns:FaxNumber"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="PostalContact" type="tns:AmericanPropertyAddress"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.Directionality-->
  <xs:simpleType name="Directionality">
    <xs:restriction base="xs:string">
      <xs:enumeration value="BIDIRECTIONAL"/>
      <xs:enumeration value="SINK"/>
      <xs:enumeration value="SOURCE"/>
      <xs:enumeration value="UNIDIRECTIONAL"/>
    </xs:restriction>
  </xs:simpleType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.UNIPair-->
  <xs:element name="UNIPair" type="tns:UNIPair"/>
  <xs:complexType name="UNIPair">
    <xs:annotation>
      <xs:documentation>UNI Pair which contains the AEnd UNI and ZEnd UNI to be paired.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:Resource">
        <xs:sequence>
          <xs:element minOccurs="0" name="UniA" type="xs:string"/>
          <xs:element minOccurs="0" name="UniZ" type="xs:string"/>
          <xs:element minOccurs="0" name="Directionality" type="tns:Directionality"/>
          <xs:element minOccurs="0" name="CoS" type="xs:string"/>
          <!--Lion US100144 changes-->
          <xs:element maxOccurs="unbounded" minOccurs="0" name="CoSBundle" type="tns:CoSBundle"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.ENNICircuit-->
  <xs:element name="ENNICircuit" type="tns:ENNICircuit"/>
  <xs:complexType name="ENNICircuit">
    <xs:complexContent>
      <xs:extension base="tns:TopologicalLink">
        <xs:sequence/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.EVCCircuit-->
  <xs:element name="EVCCircuit" type="tns:EVCCircuit"/>
  <xs:complexType name="EVCCircuit">
    <xs:complexContent>
      <xs:extension base="tns:SubNetworkConnection">
        <xs:sequence>
          <xs:element minOccurs="0" name="coreVLANID" type="xs:string"/>
          <xs:element minOccurs="0" name="CEVLANIDPreservation" type="xs:string"/>
          <xs:element minOccurs="0" name="CEVLANCoSPreservation" type="xs:string"/>
          <xs:element minOccurs="0" name="isPMFlag" type="xs:string"/>
          <xs:element minOccurs="0" name="isPMReadyFlag" type="xs:string"/>
          <xs:element minOccurs="0" name="isManagementFlag" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="HasCustomer" type="tns:Customer"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ComprisedOfUNICircuit" type="tns:UNICircuit"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="UNIPair" type="tns:UNIPair"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.Elliptic-->
  <xs:element name="Elliptic" type="tns:Elliptic"/>
  <xs:complexType name="Elliptic">
    <xs:complexContent>
      <xs:extension base="tns:Geometry">
        <xs:sequence>
          <xs:element minOccurs="0" name="HCoordinate" type="xs:string"/>
          <xs:element minOccurs="0" name="VCoordinate" type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.End2EndCircuit-->
  <xs:element name="End2EndCircuit" type="tns:End2EndCircuit"/>
  <xs:complexType name="End2EndCircuit">
    <xs:complexContent>
      <xs:extension base="tns:SubNetworkConnection">
        <xs:sequence/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.Entity-->
  <xs:element name="Entity" type="tns:Entity"/>
  <xs:complexType name="Entity">
    <xs:annotation>
      <xs:documentation>This is an abstract base class that is used to represent entities that cannot be directly managed (e.g., a hub).</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:RootEntity">
        <xs:sequence>
          <xs:element minOccurs="0" name="version" type="xs:string">
            <xs:annotation>
              <xs:documentation>This is a graphic string that identifies the version of the object.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="firmwareVersion" type="xs:string"/>
          <xs:element minOccurs="0" name="softwareVersion" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="EntityRecognizedUsing" type="tns:EntityIdentification"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="CompositeEntityRecognizedUsing" type="tns:CompositeEntityIdentification"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="Remarks" type="tns:Remarks"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.EntityIdentification-->
  <xs:element name="EntityIdentification" type="tns:EntityIdentification"/>
  <xs:complexType name="EntityIdentification">
    <xs:annotation>
      <xs:documentation>Essential characteristics that uniquely identifies somebody or something.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="identificationName" type="xs:string"/>
      <xs:element minOccurs="0" name="identificationValue" type="xs:string"/>
      <xs:element minOccurs="0" name="value" type="xs:string">
        <xs:annotation>
          <xs:documentation>A value used to identify an instance of an entity.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.EntityRole-->
  <xs:element name="EntityRole" type="tns:EntityRole"/>
  <xs:complexType name="EntityRole">
    <xs:annotation>
      <xs:documentation>This is an abstract base class that defines the concept of various types of roles for entities that are used to describe ManagedEntities in the DEN-ng model.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:Role">
        <xs:sequence/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.Equipment-->
  <xs:element name="Equipment" type="tns:Equipment"/>
  <xs:complexType name="Equipment">
    <xs:annotation>
      <xs:documentation>This class is based on the m.3100 specification, and is described as follows:

The Equipment object class is a class of managed objects that represents physical components of a managed device, including replaceable components. An instance of this object class must be present in only a single geographic location. An Equipment object may be nested within another Equipment object, thereby creating a containment relationship. The Equipment type shall be identified by sub-classing this object class. Either the name of the sub-class or an attribute may be used for identifying the equipment type.

Changed name of m.3100 attribute AlarmReportingIndicator to AlarmStatus, and enhanced semantics.

The m.3100 SystemTitle attribute is NOT implemented in this class, we're using CommonName instead.

We don't support the m.3100 supportedByObjectList attribute. This attribute is intended to list a set of physical and logical objects that directly affect this object. We think that the model should show this via associations, not via an embedded attribute.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:PhysicalContainer">
        <xs:sequence>
          <xs:element minOccurs="0" name="resourceFulfillmentState" type="tns:ResourceFulfillmentState">
            <xs:annotation>
              <xs:documentation>This attribute supports basic administration of plug-ins.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="protectionSchemeState" type="tns:ProtectionSchemeState">
            <xs:annotation>
              <xs:documentation>This attribute identifies the individual lock of this equipment. In case the equipment is not protected, the value "UNKNOWN" shall also be used.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="protectionRole" type="tns:ProtectionRole">
            <xs:annotation>
              <xs:documentation>This attribute defines the protection role that this equipment plays. In case the equipment is not protected, the value "NOT_APPLICABLE" shall be used.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="isReportingAlarms" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This attribute provides an indication of whether alarm reporting for this Equipment is enabled (true) or disabled (false).</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="installedVersion" type="xs:string">
            <xs:annotation>
              <xs:documentation>This attribute identifies the vendor's resource version of the installed equipment.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="installedSerialNumber" type="xs:string">
            <xs:annotation>
              <xs:documentation>This attribute contains the vendor's serial number of the installed equipment. Unique, if no default is provided. At least one serial number has to be provided.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="installedPartNumber" type="xs:string">
            <xs:annotation>
              <xs:documentation>This attribute identifies the vendor's resource Part Number (PN) of the installed equipment. If PN is not available empty string shall be used. If the part and serial number are both non-null then the part+serial number together shall be unique.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="installedEquipmentObjectType" type="xs:string">
            <xs:annotation>
              <xs:documentation>This attribute identifies the type of the installed resource. For example, "Fan" or "STM16" for the Equipment class and "Line Shelf" for the Equipment Holder class.) The installed equipment type is invariant for the lifetime of the hardware. This is an empty string if there is no expected equipment.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="expectedEquipmentObjectType" type="xs:string">
            <xs:annotation>
              <xs:documentation>This attribute identifies the type of the expected resource. For example, "Fan" or "STM16" for the Equipment class and "Line Shelf" for the Equipment Holder class.) This is an empty string if there is no expected equipment.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="installStatus" type="xs:int">
            <xs:annotation>
              <xs:documentation>This is an m.3100 attribute that represents the availability of the type of Equipment that this object represents. Its semantics are as follows.

The attribute availability status is used to indicate whether the correct physical piece of equipment (in m.3100, it is called a "circuit pack") is isntalled or not. This is a set valued attribute and includes the values notInstalled and empty. If the type of the inserted physical circuit pack matches the value of the circuitPackType attribute (relating to the circuitPack instance) then the value of the availabilityStatus is an empty set. Otherwise, the value of the availabilityStatus attribute is notInstalled even if it is one of the acceptable circuit pack type

This is implemented as an enumerated integer. The values will include at least the following:

 0: Unknown
 1: Operational (installed and matches expected type)
 2: Installed (buit does not match expected type)
 3: Not Installed
 4: In Maintenance
 5: Failed
 6: Not operational

This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="expectedEquipmentType" type="xs:string">
            <xs:annotation>
              <xs:documentation>This attribute identifies the type of the expected resource. For example, "Fan" or "STM16" for the Equipment class and "Line Shelf" for the Equipment Holder class. This is an empty string if there is no expected equipment. This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="installedEquipmentType" type="xs:string">
            <xs:annotation>
              <xs:documentation>This attribute identifies the type of the installed resource. For example, "Fan" or "STM16" for the Equipment class and "Line Shelf" for the Equipment Holder class. The installed equipment type is invariant for the lifetime of the hardware. This is an empty string if there is no installed equipment. This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="redundancy" type="xs:int">
            <xs:annotation>
              <xs:documentation>This is an enumerated integer that describes the redundancy capabilities of this particular Equipment. Values include:

 0: Unknown
 1: Primary (supported by a Redundant Equipment)
 2: Redundant (supports a Primary Equipment)
 3: Stand-alone (no Redundancy possible)

This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="asapRef" type="xs:anySimpleType"/>
          <xs:element minOccurs="0" name="EquipmentInEquipment" type="tns:Equipment"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="supportedBy" type="tns:Equipment"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="supports" type="tns:Equipment"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.EquipmentHolder-->
  <xs:element name="EquipmentHolder" type="tns:EquipmentHolder"/>
  <xs:complexType name="EquipmentHolder">
    <xs:annotation>
      <xs:documentation>This class is based on the M.3100 specification, and is a base class that represents physical objects that are both manageable as well as able to host, hold, or contain other physical objects. Examples of physical objects that can be represented by instances of this object class are Racks, Chassis, Shelfs, and Slots.

The difference between subclasses of EquipmentHolder (such as a Slot or a Chassis) and subclasses of Equipment that have a Holder role (such as a Card) is that the subclasses of EquipmentHolder are dedicated to holding other Hardware. The subclasses of Equipment that have a holder role have a holding capability as a secondary capability, usually for expansion. Their primary function, however, is not to hold other objects.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:PhysicalContainer">
        <xs:sequence>
          <xs:element minOccurs="0" name="type" type="xs:string">
            <xs:annotation>
              <xs:documentation>This attribute identifies the type of the Holder (e.g., Rack (or Bay), Shelf, Sub-shelf, Slot, Subslot, Remote-unit or Remote-subslot).</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="state" type="tns:HolderState">
            <xs:annotation>
              <xs:documentation>This attribute identifies the state of the Equipment Holder.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="location" type="xs:string">
            <xs:annotation>
              <xs:documentation>This attribute identifies the geographical location of the Equipment Holder.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="isReportingAlarms" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This attribute provides an indication of whether alarm reporting for this Equipment Holder is enabled (true) or disabled (false).</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="expectedOrInstalledEquipmentRef" type="xs:anySimpleType">
            <xs:annotation>
              <xs:documentation>This attribute identifies the equipment object expected or installed in the equipment holder, if any. Null if the equipment holder is empty or if it only contains other equipment holders.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="asapRef" type="xs:anySimpleType">
            <xs:annotation>
              <xs:documentation>This attribute indicates the assignment of an Alarm Severity Assignement Profile (ASAP) to the EquipmentHolder.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="acceptableEquipmentTypeList" type="xs:string">
            <xs:annotation>
              <xs:documentation>This attribute identifies the types of equipment that can be supported by the Equipment Holder.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="acceptableEquipmentList" type="xs:string">
            <xs:annotation>
              <xs:documentation>This is an array of strings, based on M.3100, that identifies the types of equipment objects that can be supported by this object. This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="typeOfHolder" type="xs:int">
            <xs:annotation>
              <xs:documentation>This is an enumerated integer that identifies the type of the Holder that this object instance is. It is based on M.3100 but includes additional values:
 0: Unknown
 1: Rack
 2: Bay
 3: Chassis
 4: Shelf
 5: Slot
 6: Sub-Slot
 7: Sub-Rack

This is a REQUIRED attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="isSolitaryHolder" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This is a Boolean attribute that, if TRUE, defines this EquipmentHolder as containing only one ManagedComponent. If this is FALSE, then this EquipmentHolder contains nested ManagedComponents. This is a REQUIRED attrinbute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="holderStatus" type="xs:int">
            <xs:annotation>
              <xs:documentation>This attribute, based on M.3100, indicates the status of the EquipmentHolder. Values include:

 0: Unknown
 1: Installed And Acceptable
 2: Installed And Not Acceptable
 3: Not Installed
 4: Mismatch Of Installed and Acceptable
 5: Unavailable

This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="HoldsHardware" type="tns:Hardware"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="Equipment" type="tns:Equipment"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.Error-->
  <xs:element name="Error" type="tns:Error"/>
  <xs:complexType name="Error">
    <xs:sequence>
      <xs:element minOccurs="0" name="ErrorCode" type="xs:string"/>
      <xs:element minOccurs="0" name="ErrorMessage" type="xs:string"/>
      <xs:element minOccurs="0" name="SourceSystem" type="xs:string"/>
      <xs:element minOccurs="0" name="ErrorStatus" type="xs:string"/>
      <xs:element minOccurs="0" name="ErrorText" type="xs:string"/>
      <xs:element minOccurs="0" name="ErrorDeveloperMessage" type="xs:string"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="AdditionalContext" type="tns:AdditionalContext"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="MetaData" type="tns:MetaData"/>
    </xs:sequence>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.AdditionalContext-->
  <xs:complexType name="AdditionalContext">
    <xs:sequence>
      <xs:element minOccurs="0" name="Type" type="xs:string"/>
      <xs:element minOccurs="0" name="Message" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.MetaData-->
  <xs:complexType name="MetaData">
    <xs:sequence>
      <xs:element minOccurs="0" name="Title" type="xs:string"/>
      <xs:element minOccurs="0" name="Type" type="xs:string"/>
      <xs:element minOccurs="0" name="Url" type="xs:string"/>
      <xs:element minOccurs="0" name="Id" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.ExchangeServiceArea-->
  <xs:element name="ExchangeServiceArea" type="tns:ExchangeServiceArea"/>
  <xs:complexType name="ExchangeServiceArea">
    <xs:complexContent>
      <xs:extension base="tns:GeographicLocation">
        <xs:sequence>
          <xs:element minOccurs="0" name="areaType" type="xs:string"/>
          <xs:element minOccurs="0" name="name" type="xs:string"/>
          <xs:element minOccurs="0" name="code" type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.GeographicAddress-->
  <xs:element name="GeographicAddress" type="tns:GeographicAddress"/>
  <xs:complexType name="GeographicAddress">
    <xs:annotation>
      <xs:documentation>A structured textual way of describing how to find a Geographic Location. It is usually composed of an ordered list of Geographic Location names based on context specific rulesIt is an abstract modeling concept that provides a linking point to other parts of the SID model.It holds attributes common to all Geographic Address subclasses.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:AbstractGeographicAddress">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="GeographicLocation" type="tns:GeographicLocation"/>
          <xs:element minOccurs="0" name="stateOrProvince" type="xs:string">
            <xs:annotation>
              <xs:documentation>the State that the Address is in</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="addressType" type="xs:string"/>
          <!--Added addressRole as part of CLC mapping requirement AUC237530-->
          <xs:element maxOccurs="unbounded" minOccurs="0" name="AddressRole" type="tns:EntityRole"/>
          <xs:element minOccurs="0" name="CLLI" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="GeoAddressHasLogicalAddresses" type="tns:LogicalAddress"/>
          <xs:element minOccurs="0" name="EllipticLocation" type="tns:Elliptic"/>
          <xs:element minOccurs="0" name="PoBoxAddress" type="tns:PoBoxAddress"/>
          <xs:element minOccurs="0" name="GridLocalLocation" type="tns:GridLocalLocation"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ExchangeServiceArea" type="tns:ExchangeServiceArea"/>
          <xs:element minOccurs="0" name="Country" type="tns:Country"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.GeographicLocation-->
  <xs:element name="GeographicLocation" type="tns:GeographicLocation"/>
  <xs:complexType name="GeographicLocation">
    <xs:annotation>
      <xs:documentation>A defined place on or near the earth's surface.It is an abstract modeling concept that provides a linking point to other parts of the SID model.It holds attributes common to all Geographic Location subclasses.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:GeographicPlace">
        <xs:sequence>
          <xs:element minOccurs="0" name="accuracy" type="xs:string">
            <xs:annotation>
              <xs:documentation>e.g. this GPS measurement is accurate to +-20 metres.tThis attribute allows us to determine when two points close to each other could be the same point. Refer "[OGIS] Abstract Specification, Topic 9: Quality" for details of this complex subject.Quality for details of this complex subject.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="geometry" type="tns:Geometry"/>
          <xs:element minOccurs="0" name="EllipticLocation" type="tns:Elliptic"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.GeographicPlace-->
  <xs:element name="GeographicPlace" type="tns:GeographicPlace"/>
  <xs:complexType name="GeographicPlace">
    <xs:annotation>
      <xs:documentation>Allows us to determine where things are in relation to the earth's surface.It is an abstract modeling concept that provides a linking point to other parts of the SID model.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:Place">
        <xs:sequence/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.Geometry-->
  <xs:element name="Geometry" type="tns:Geometry"/>
  <xs:complexType name="Geometry"/>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.GridLocalLocation-->
  <xs:element name="GridLocalLocation" type="tns:GridLocalLocation"/>
  <xs:complexType name="GridLocalLocation">
    <xs:complexContent>
      <xs:extension base="tns:LocalLocation">
        <xs:sequence>
          <xs:element minOccurs="0" name="gridX" type="xs:string"/>
          <xs:element minOccurs="0" name="gridY" type="xs:string"/>
          <xs:element minOccurs="0" name="gridZ" type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.Hardware-->
  <xs:element name="Hardware" type="tns:Hardware"/>
  <xs:complexType name="Hardware">
    <xs:annotation>
      <xs:documentation>This is an abstract base class that represents any type of hardware entity that exists as an atomic unit that is not a PhysicalLink or a PhysicalConnector. Hardware is defined as any component that has a distinct physical identity and can be a component of a PhysicalDevice. An object has a physical identity if it has a physical manifestation that enables it to be held and have a label attached to it. Thus, software, files, 
ols, and policies are not physical objects.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:PhysicalResource">
        <xs:sequence>
          <xs:element minOccurs="0" name="depth" type="xs:string">
            <xs:annotation>
              <xs:documentation>This attribute defines the depth of the ManagedComponent using the units specified in the MeasurementUnits attribute. This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="height" type="xs:string">
            <xs:annotation>
              <xs:documentation>This attribute defines the height of the ManagedComponent using the units specified in the MeasurementUnits attribute. This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="measurementUnits" type="xs:int">
            <xs:annotation>
              <xs:documentation>This attribute defines the MeasurementUnits for the Depth, Height, and Width attributes of this object. Values include:

 0: Unknown (or not measured)
 1: inches
 2: feet
 3: millimeters
 4: centimeters
 5: meters

This is an optional attribute. However, if any of the Depth, Height, or Width attributes are defined, then this attribute is REQUIRED.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="weight" type="xs:string">
            <xs:annotation>
              <xs:documentation>This attribute defines the weight of the ManagedComponent using the units specified in the WeightUnits attribute. This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="weightUnits" type="xs:int">
            <xs:annotation>
              <xs:documentation>This attribute defines the Units for the Weight attribute of this object. Values include:

 0: Unknown (Not Measured)
 1: ounces
 2: pounds
 3: grams
 4: kilograms

This is an optional attribute. However, if Weight attribute is defined, then this attribute is REQUIRED.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="width" type="xs:string">
            <xs:annotation>
              <xs:documentation>This attribute defines the width of the ManagedComponent using the units specified in the MeasurementUnits attribute. This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ContainsHardware" type="tns:Hardware"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.HolderAtomic-->
  <xs:element name="HolderAtomic" type="tns:HolderAtomic"/>
  <xs:complexType name="HolderAtomic">
    <xs:annotation>
      <xs:documentation>This class represents atomic holders of Equipment that are individually manageable and do NOT form composite, or nested, Equipment Holders.

Each HolderAtomic object can be a FRU.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:EquipmentHolder">
        <xs:sequence>
          <xs:element minOccurs="0" name="physicalDescription" type="xs:string">
            <xs:annotation>
              <xs:documentation>This is a free-form string that defines the physically unique characteristics of this holder. This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="uniquePhysical" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This is a Boolean attribute that, if TRUE, means that this holder is physically different from other holders, and is intended to hold a special type of equipment (e.g., a doublewide card, or a longer card than normal). This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.HolderComposite-->
  <xs:element name="HolderComposite" type="tns:HolderComposite"/>
  <xs:complexType name="HolderComposite">
    <xs:annotation>
      <xs:documentation>This class represents EquipmentHolders that are made up of other EquipmentHolders (i.e., instances of this class as well as the HolderAtomic base class). This provides the semantics of collecting a set of components, each of which is individually manageable, and being able to manage the set of objects as a whole. This containment is modeled using the HasHolders aggregation.

Each HolderComposite element can be a FRU.

A characteristic of this class is that its subclasses are physical objects that have complex cabling and mounting options. This class is meant to differentiate complex holders, like a Chassis, from simple holders, like a Slot.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:EquipmentHolder">
        <xs:sequence>
          <xs:element minOccurs="0" name="cableManagementStrategy" type="xs:string">
            <xs:annotation>
              <xs:documentation>This is a free-form string that contains information on how the various cables contained in the Chassis, Rack, or other type of HolderComposite object are connected and bundled. This property contains information to aid in the assembly and service of the cables contained in a SecureHolder object. This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="mountingOptions" type="xs:int">
            <xs:annotation>
              <xs:documentation>This is an enumerated 16-bit unsigned integer that defines how Equipment in this entity is mounted. Values include:

 0: Unknown
 1: Stand-alone
 2: Rack-mounted, free access
 3: Rack-mounted, restricted access
 4: Enclosed in another chassis

This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="serviceApproach" type="xs:string">
            <xs:annotation>
              <xs:documentation>This is an enumerated, integer-valued array that defines how this entity is serviced (e.g., from the top or front), whether it has sliding trays or removable sides, and/or whether the Frame is moveable (e.g., it has rollers). Values include:

 0: Unknown
 1: Custom
 2: Service From Top
 3: Service From Front
 4: Service From Back
 5: Service From Side
 6: Sliding Trays
 7: Removable Sides
 8: Moveable

This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="HasHolders" type="tns:EquipmentHolder"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.HolderState-->
  <xs:simpleType name="HolderState">
    <xs:restriction base="xs:string">
      <xs:enumeration value="EMPTY"/>
      <xs:enumeration value="EXPECTED_AND_NOT_INSTALLED"/>
      <xs:enumeration value="INSTALLED_AND_EXPECTED"/>
      <xs:enumeration value="INSTALLED_AND_NOT_EXPECTED"/>
      <xs:enumeration value="MISMATCH_OF_INSTALLED_AND_EXPECTED"/>
      <xs:enumeration value="UNAVAILABLE"/>
      <xs:enumeration value="UNKNOWN"/>
    </xs:restriction>
  </xs:simpleType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.IPAddress-->
  <xs:element name="IPAddress" type="tns:IPAddress"/>
  <xs:complexType name="IPAddress">
    <xs:annotation>
      <xs:documentation>This class represents an IP address. It can be either in v4 or v6 form, and can be formatted as dotted decimal or CIDR. One or more host aliases can also be supplied.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:NetworkAddress">
        <xs:sequence>
          <xs:element minOccurs="0" name="networkNumber" type="xs:string">
            <xs:annotation>
              <xs:documentation>This contains the network number portion of the IP Address.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="hostNumber" type="xs:string">
            <xs:annotation>
              <xs:documentation>This contains the host number portion of the IP Address.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="subnetMask" type="xs:string">
            <xs:annotation>
              <xs:documentation>This is a string attribute that defines the subnet mask for the IP Address of this instance. The IP Address is constructed by concatenating the networkNumber and the hostNumber, forming a dotted decimal IP Address. The subnetMask is formatted according to the appropriate convention as defined in the addressFormat attribute of this object.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="gateway" type="xs:string"/>
          <xs:element minOccurs="0" name="startPort" type="xs:string"/>
          <xs:element minOccurs="0" name="endPort" type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.LocalLocation-->
  <xs:element name="LocalLocation" type="tns:LocalLocation"/>
  <xs:complexType name="LocalLocation">
    <xs:annotation>
      <xs:documentation>A defined place defined by a local coordinate system.It is an abstract modeling concept that provides a linking point to other parts of the SID model.It holds attributes common to all Local Location subclasses.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:LocalPlace">
        <xs:sequence/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.LocalPlace-->
  <xs:element name="LocalPlace" type="tns:LocalPlace"/>
  <xs:complexType name="LocalPlace">
    <xs:annotation>
      <xs:documentation>Allows us to determine where things are in relation to a local coordinate system.It is an abstract modeling concept that provides a linking point to other parts of the SID model.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:Place">
        <xs:sequence/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.LogicalAddress-->
  <xs:element name="LogicalAddress" type="tns:LogicalAddress"/>
  <xs:complexType name="LogicalAddress"/>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.LogicalPhysicalResource-->
  <xs:element name="LogicalPhysicalResource" type="tns:LogicalPhysicalResource"/>
  <xs:complexType name="LogicalPhysicalResource">
    <xs:complexContent>
      <xs:extension base="tns:Entity">
        <xs:sequence>
          <xs:element minOccurs="0" name="typeOfLPDependency" type="xs:int"/>
          <xs:element minOccurs="0" name="PhysicalResource" type="tns:PhysicalResource"/>
          <xs:element minOccurs="0" name="PhysicalDevice" type="tns:PhysicalDevice"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.LogicalResource-->
  <xs:element name="LogicalResource" type="tns:LogicalResource"/>
  <xs:complexType name="LogicalResource">
    <xs:annotation>
      <xs:documentation>This is an abstract base class for describing different logical aspects of devices (e.g., DeviceInterfaces) that constitute a Product. It has two main purposes: (1) to collect common attributes and relationships for all logical entities, and (2) to provide a convenient, single point where relationships with other managed objects can be defined.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:Resource">
        <xs:sequence>
          <xs:element minOccurs="0" name="lrStatus" type="xs:string">
            <xs:annotation>
              <xs:documentation>This is an enumerated integer whose value indicates the current status of the object. The following values are defined:

 0: Unknown
 1: OK
 2: Initializing
 3: Starting
 4: Paused
 5: Stopping
 6: Stopped
 7: Degraded
 8: Stressed 
 9: Predicted Failure
 10: Error - General
 11: Error - Non Recoverable
 12: Not Installed or Not Present
 13: In Maintenance
 14: Unable To Contact
 15: Lost Communications

Stopped indicates that the LogicalResource is known to still exist, but it is no longer operational. However, it has not failed.
 
Stressed indicates that the LogicalResource is functioning, but needs attention (e.g., it may be overheating, or overloaded in some way). This is similar to Predicted Failure, which indicates that this LogicalResource is functioning properly, but is predicting a failure in the near future.

In Maintenance indicates that this LogicalResource is being configured, maintained, or otherwise administered and is NOT available for service.

Unable To Contact indicates that the monitoring system has knowledge of this LogicalResource but has never been able to establish communications with it. In contrast, Lost Commmunications indicates that the LogicalResource has been contacted successfully in the past and is known to still exist; however, it is currently unreachable.

This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="serviceState" type="xs:string">
            <xs:annotation>
              <xs:documentation>This is an enumerated integer that defines the availability and usage (i.e., the service state) of this LogicalResource. Its values are:

 0: Unknown
 1: In Service
 2: Out of Service
 3: Testing
 4: In Maintenance
 5: Not Available
 6: Not Applicable

This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="isOperational" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This attribute is used to define the operational status of the object, and is implemented as a Boolean: TRUE means that the object is currently operational, and FALSE means that the object is not currently operational.

This is a REQUIRED attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="LogicalPhysicalResource" type="tns:LogicalPhysicalResource"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: iclnbi.com.iclnbi.iclnbi.BusinessInteraction-->
  <xs:element name="BusinessInteraction" type="tns:BusinessInteraction"/>
  <xs:complexType name="BusinessInteraction">
    <xs:annotation>
      <xs:documentation>A BusinessInteraction is an arrangement, contract, communication or joint activity between one or more PartyRoles, ResourceRoles, or CustomerAccounts.  A BusinessInteraction may consist of one or more BusinessInteractionItems.  A BusinessInteractionItem may refer to a Product, Service, Resource, or one of their specifications.  A BusinessInteraction is further defined by one or more Places.  One BusinessInteraction may reference another BusinessInteraction and one BusinessInteractionItem may reference another BusinessInteractionItem on the same or different BusinessInteraction.  There are five types of BusinessInteractions:  Requests, Responses, Notifications, Agreements, and Instructions.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:Entity">
        <xs:sequence>
          <xs:element minOccurs="0" name="ID" type="xs:string">
            <xs:annotation>
              <xs:documentation>Unique identifier for Interaction.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="interactionDate" type="xs:date">
            <xs:annotation>
              <xs:documentation>Date interaction initiated.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="interactionDateComplete" type="xs:date">
            <xs:annotation>
              <xs:documentation>The date on which an interaction is closed or completed.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="interactionStatus" type="xs:string">
            <xs:annotation>
              <xs:documentation>The current condition of an interaction, such as open, in research, closed, and so forth.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="BusinessInteractionComprisedOf" type="tns:BusinessInteractionItem"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: iclnbi.com.iclnbi.iclnbi.BusinessInteractionItem-->
  <xs:element name="BusinessInteractionItem" type="tns:BusinessInteractionItem"/>
  <xs:complexType name="BusinessInteractionItem">
    <xs:sequence>
      <xs:element minOccurs="0" name="action" type="xs:string"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="BusinessInteractionItemInvolves" type="tns:BusinessInteractionRole"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="BusinessInteractionItemInvolvesProduct" type="tns:Product"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="BusinessInteractionItemInvolvesResource" type="tns:Resource"/>
    </xs:sequence>
  </xs:complexType>
  <!--The type: iclnbi.com.iclnbi.iclnbi.BusinessInteractionRole-->
  <xs:element name="BusinessInteractionRole" type="tns:BusinessInteractionRole"/>
  <xs:complexType name="BusinessInteractionRole">
    <xs:sequence>
      <xs:element minOccurs="0" name="interactionRole" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <!--The type: iclnbi.com.iclnbi.iclnbi.Product-->
  <xs:element name="Product" type="tns:Product"/>
  <xs:complexType name="Product">
    <xs:sequence>
      <xs:element minOccurs="0" name="name" type="xs:string"/>
      <xs:element minOccurs="0" name="description" type="xs:string"/>
      <xs:element minOccurs="0" name="productStatus" type="xs:string"/>
      <xs:element minOccurs="0" name="productSerialNumber" type="xs:string"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="ProductRealizedAsResource" type="tns:Resource"/>
    </xs:sequence>
  </xs:complexType>
  <!--The type: iclnbi.com.iclnbi.iclnbi.ManagementDomain-->
  <xs:element name="ManagementDomain" type="tns:ManagementDomain"/>
  <xs:complexType name="ManagementDomain">
    <xs:complexContent>
      <xs:extension base="tns:RootEntity">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ScopedManagedEntities" type="tns:ManagedEntity"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="HasManagementDomains" type="tns:ManagementDomain"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.ManagedEntity-->
  <xs:element name="ManagedEntity" type="tns:ManagedEntity"/>
  <xs:complexType name="ManagedEntity">
    <xs:annotation>
      <xs:documentation>This is an abstract base class that is used to represent entities in a managed environment that have the following semantics in common: (1) a ManagedBusinessEntity owns or is otherwise responsible for them, (2) management of the entity is critical for providing a service and/or maintaining the environment, and (3) the entity is "important" from a management point-of-view. As such, it is a point at which semantically important relationships can be created; this avoids duplicating these relationships on multiple subclasses as well as forcing ManagedObject to support these relationships.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:Entity">
        <xs:sequence>
          <xs:element minOccurs="0" name="managementMethodCurrent" type="xs:int">
            <xs:annotation>
              <xs:documentation>This is an enumerated integer that defines the particular type of management method that is currently being used. Values include:

 0: Unknown
 1: None
 2: CLI
 3: SNMP
 4: TL1
 5: CMIP
 6: Proprietary</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="managementMethodSupported" type="xs:int">
            <xs:annotation>
              <xs:documentation>This is an array of integers that define the different management methods that are supported by this object. Values include:
 
 0: Unknown
 1: None
 2: CLI
 3: SNMP
 4: TL1
 5: CMIP
 6: Proprietary</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="EntityHasRoles" type="tns:EntityRole"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.ManagedHardware-->
  <xs:element name="ManagedHardware" type="tns:ManagedHardware"/>
  <xs:complexType name="ManagedHardware">
    <xs:annotation>
      <xs:documentation>This is an abstract base class that adds additional semantics to the Hardware base class. These semantics are used to provide management information on the hardware. For example, attributes defined by this class can provide the administrative and operational state of the entity, and tell whether it has any alarms.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:Hardware">
        <xs:sequence>
          <xs:element minOccurs="0" name="administrativeState" type="xs:int">
            <xs:annotation>
              <xs:documentation>This attribute is an enumerated integer that describes the current physical state of the ManagedHardware. Values include:

 0: Unknown
 1: Unlocked
 2: Locked
 3: Shutting Down
 4: Starting Up
 5: Testing
 6: Maintenance
 7: Not Applicable
 8: Not able to inform

This is a REQUIRED attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="physicalAlarmReportingEnabled" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This is a Boolean attribute, and defines whether alarm reporting for this object instance is enabled or not. TRUE means that reporting is allowed, and FALSE means that reporting is inhibited.

Note that some physical entities are not capable of reporting physical alarms, while some are. For those that are not capable of reporting physical alarms, this value MUST be set to FALSE.

Remember that this is for physical alarm reporting. In most cases, there are corresponding logical alarms. The ManagementEntity class hierarchy describes and correlates these.

This is a REQUIRED attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="physicalAlarmStatus" type="xs:int">
            <xs:annotation>
              <xs:documentation>This is an enumerated integer that indicates the occurrence of an abnormal physical condition relating to an object. This attribute may also function as a summary indicator of alarm conditions associated with a specific resource. It is used to indicate the existence of an alarm condition, a pending alarm condition such as threshold situations, or (when used as a summary indicator) the highest severity of active alarm conditions.

This attribute expands on the standard ITU semantics and updates them to include eTOM concepts. Values include:

 0: unknown
 1: activeReportable-Critical
 2: activeReportable-Major
 3: activeReportable-Minor
 4: activeReportable-Indeterminate
 5: activeReportable-Warning
 6: activePendingDecision
 7: active-underRepair
 8: active-beingReplaced
 9: cleared

This is a REQUIRED attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="coolingRequirements" type="xs:string">
            <xs:annotation>
              <xs:documentation>This is a free-form string that specifies the cooling requirements for this ManagedComponents. Specific cooling information is defined by the Cooling association. This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="hardwarePurpose" type="xs:int">
            <xs:annotation>
              <xs:documentation>This is an enumerated integer that defines the purpose of the ManagedHardware. Values include:

 1: Required
 2: Optional
 3: Redundant
 4: Fail-Over
 5: Other

This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.ManagedTransmissionEntity-->
  <xs:element name="ManagedTransmissionEntity" type="tns:ManagedTransmissionEntity"/>
  <xs:complexType name="ManagedTransmissionEntity">
    <xs:annotation>
      <xs:documentation>This is an abstract base class for describing different types of logical entities that are or help to form connections that transmit and/or receive information. This represents a superclass to various ITU specs (e.g., G.805 and M.3100) as well as IETF concepts (such as those found in various RFCs) so that it can unite ITU and IETF concepts.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:LogicalResource">
        <xs:sequence>
          <xs:element minOccurs="0" name="mteAdministrativeState" type="xs:string">
            <xs:annotation>
              <xs:documentation>This attribute is based on X.721. It is an enumerated integer that defines the administrative state of the Equipment. Values include:

 0: Unknown
 1: Unlocked
 2: Locked
 3: Shutting Down
 4: Starting Up
 5: Testing
 6: Maintenance</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="logicalAlarmReportingEnabled" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This is a Boolean attribute, and defines whether alarm reporting for this object instance is enabled or not. TRUE means that reporting is allowed, and FALSE means that reporting is inhibited.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="logicalAlarmStatus" type="xs:int">
            <xs:annotation>
              <xs:documentation>This is an enumerated integer that indicates the occurrence of an abnormal condition relating to an object. This attribute may also function as a summary indicator of alarm conditions associated with a specific resource. It is used to indicate the existence of an alarm condition, a pending alarm condition such as threshold situations, or (when used as a summary indicator) the highest severity of active alarm conditions. Values include:

 0: unknnown
 1: active -Critical
 2: active - Major
 3: active - Minor
 4: active - Indeterminate
 5: active - Warning
 6: active - Pending
 7: active - UnderRepair
 8: active- Being Replaced
 9: cleared</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="isMTEOperational" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This attribute is used to define the operational status of the object, and is implemented as a Boolean: TRUE means that the object is currently operational, and FALSE means that the object is not currently operational.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="typeOfMTE" type="xs:int">
            <xs:annotation>
              <xs:documentation>This attribute is an enumerated integer. It defines the type of ManagedTransmissionEntity that this instance is. Values include:

 0: Unknown
 1: Connection
 2: Trail
 3: TrailTerminationPointSource
 4: TrailTerminationPointSink
 5: TrailTerminationPointBiDirectional
 6: ConnectionTerminationPointSource
 7: ConnectionTerminationPointSink
 8: ConnectionTerminationPointBiDirectional</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="operationalState" type="xs:int">
            <xs:annotation>
              <xs:documentation>This attribute is based on X.721, and defines the current operationalState of its containing managed object. Values include:

 0: Status not available
 1: Enabled and In Service
 2: Enabled but Not In Service
 3: Disabled</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.MessageAddressing-->
  <xs:element name="MessageAddressing" type="tns:MessageAddressing"/>
  <xs:complexType name="MessageAddressing">
    <xs:sequence>
      <xs:element minOccurs="0" name="from" type="xs:string"/>
      <xs:element minOccurs="0" name="to" type="xs:string"/>
      <xs:element minOccurs="0" name="replyTo" type="xs:string"/>
      <xs:element minOccurs="0" name="relatesTo" type="xs:string"/>
      <xs:element minOccurs="0" name="messageID" type="xs:string"/>
      <xs:element minOccurs="0" name="action" type="xs:string"/>
      <xs:element minOccurs="0" name="timestamp" type="xs:string"/>
      <xs:element minOccurs="0" name="transactionID" type="xs:string"/>
      <xs:element minOccurs="0" name="serviceName" type="xs:string"/>
      <xs:element minOccurs="0" name="serviceVersion" type="xs:string"/>
      <xs:element minOccurs="0" name="userId" type="xs:string"/>
      <xs:element minOccurs="0" name="password" type="xs:string"/>
      <xs:element minOccurs="0" name="PageInfo" type="tns:Pagination"/>
    </xs:sequence>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.Pagination-->
  <xs:element name="Pagination" type="tns:Pagination"/>
  <xs:complexType name="Pagination">
    <xs:sequence>
      <xs:element minOccurs="0" name="paginationRequired" type="xs:string"/>
      <xs:element minOccurs="0" name="pageNumber" type="xs:string"/>
      <xs:element minOccurs="0" name="pageSize" type="xs:string"/>
      <xs:element minOccurs="0" name="totalPages" type="xs:string"/>
      <!--Added totalRecords for CCB#368-->
      <xs:element minOccurs="0" name="totalRecords" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.Protocol-->
  <xs:element name="Protocol" type="tns:Protocol"/>
  <xs:complexType name="Protocol">
    <xs:annotation>
      <xs:documentation>A Protocol is a formal set of rules and conventions that governs how two entities exchange information (usually over one or more types of network media).

This is an abstract base class for representing Protocols that can be managed. This class represents a convenient aggregation point for defining how Protocols are managed and used.

Please see the DEN-ng Service model for more details.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:LogicalResource">
        <xs:sequence>
          <xs:element minOccurs="0" name="currentPortNumber" type="xs:string"/>
          <xs:element minOccurs="0" name="isEphemeral" type="xs:string"/>
          <xs:element minOccurs="0" name="protocolDirection" type="xs:string"/>
          <xs:element minOccurs="0" name="portRangeStart" type="xs:string"/>
          <xs:element minOccurs="0" name="portRangeEnd" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ProtocolServiceDetails" type="tns:ProtocolServiceDetails"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ProtocolDeviceInterfaceDetails" type="tns:ProtocolDeviceInterfaceDetails"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.ProtocolServiceDetails-->
  <xs:element name="ProtocolServiceDetails" type="tns:ProtocolServiceDetails"/>
  <xs:complexType name="ProtocolServiceDetails">
    <xs:complexContent>
      <xs:extension base="tns:ManagedEntity">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ResourceFacingService" type="tns:ResourceFacingService"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.ProtocolDeviceInterfaceDetails-->
  <xs:element name="ProtocolDeviceInterfaceDetails" type="tns:ProtocolDeviceInterfaceDetails"/>
  <xs:complexType name="ProtocolDeviceInterfaceDetails">
    <xs:complexContent>
      <xs:extension base="tns:ManagedEntity">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="InterfaceDetails" type="tns:ConnectionTerminationPoint"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.MessageElements-->
  <xs:element name="MessageElements" type="tns:MessageElements"/>
  <xs:complexType name="MessageElements">
    <xs:sequence>
      <xs:element minOccurs="0" name="messageStatus" type="xs:string"/>
      <xs:element minOccurs="0" name="messageType" type="xs:string"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="ErrorList" type="tns:Error"/>
      <xs:element minOccurs="0" name="MessageAddressing" type="tns:MessageAddressing"/>
    </xs:sequence>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.NetworkAddress-->
  <xs:element name="NetworkAddress" type="tns:NetworkAddress"/>
  <xs:complexType name="NetworkAddress">
    <xs:annotation>
      <xs:documentation>This class represents the generic concept of a network address. Its subclasses define different types of addresses of different technologies, such as an IPAddress vs. an IPXAddress. Its utility lies in its ability to serve as a convenient point for sourcing and terminating relationships. This eliminates undue duplication of relationships that interact with the subclasses of NetworkAddress.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:LogicalResource">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="NetworkAddressReferences" type="tns:NetworkAddress"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.NetworkRouted-->
  <xs:simpleType name="NetworkRouted">
    <xs:restriction base="xs:string">
      <xs:enumeration value="NO"/>
      <xs:enumeration value="NOT_APPLICABLE"/>
      <xs:enumeration value="YES"/>
    </xs:restriction>
  </xs:simpleType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.OperationRequest-->
  <xs:element name="OperationRequest" type="tns:OperationRequest"/>
  <xs:complexType name="OperationRequest">
    <xs:sequence>
      <xs:element minOccurs="0" name="MessageElements" type="tns:MessageElements"/>
    </xs:sequence>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.OperationResponse-->
  <xs:element name="OperationResponse" type="tns:OperationResponse"/>
  <xs:complexType name="OperationResponse">
    <xs:sequence>
      <xs:element minOccurs="0" name="MessageElements" type="tns:MessageElements"/>
    </xs:sequence>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.OwnsResourceDetails-->
  <xs:element name="OwnsResourceDetails" type="tns:OwnsResourceDetails"/>
  <xs:complexType name="OwnsResourceDetails">
    <xs:complexContent>
      <xs:extension base="tns:Entity">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="Customer" type="tns:Customer"/>
          <xs:element minOccurs="0" name="PartyRole" type="tns:PartyRole"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="CustomerAgent" type="tns:CustomerAgent"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.Party-->
  <xs:element name="Party" type="tns:Party"/>
  <xs:complexType name="Party">
    <xs:annotation>
      <xs:documentation>Represents an  individual, organization or organization unit.Party is an abstract concept that should be used in places where  

the business says something can be an organization , organization unit or an individual</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:Entity">
        <xs:sequence>
          <xs:element minOccurs="0" name="partyId" type="xs:string">
            <xs:annotation>
              <xs:documentation>Unique identifier for Party</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="partyFirstName" type="xs:string"/>
          <xs:element minOccurs="0" name="partyLastName" type="xs:string"/>
          <xs:element minOccurs="0" name="partyType" type="xs:string"/>
          <xs:element minOccurs="0" name="partySubType" type="xs:string"/>
          <xs:element minOccurs="0" name="partyRoleType" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="HasCustomerRole" type="tns:Customer"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="HasCustomerAgentRole" type="tns:CustomerAgent"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="HasPartyRoles" type="tns:PartyRole"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.PartyRole-->
  <xs:element name="PartyRole" type="tns:PartyRole"/>
  <xs:complexType name="PartyRole">
    <xs:annotation>
      <xs:documentation>The part played by a party in a given context with any characteristics, such as expected pattern of behavior, attributes, and/or associations that it entails.PartyRole is an abstract concept that should be used in places where the business refers to a Party playing a Role</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:EntityRole">
        <xs:sequence>
          <xs:element minOccurs="0" name="partyRoleId" type="xs:string">
            <xs:annotation>
              <xs:documentation>Unique identifier for PartyRoles</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="status" type="xs:string">
            <xs:annotation>
              <xs:documentation>used to track the lifecycle status, e.g. existing, prospective or former customers.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="name" type="xs:string"/>
          <xs:element minOccurs="0" name="partyType" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="PartyRoleAssociation" type="tns:PartyRoleAssociation"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="PartyRoleCategorizedUsing" type="tns:PartyRoleCategory"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="PartyRolePlays" type="tns:InvolvementRole"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="PartyRoleCharValueDefinesTheConfigurationOf" type="tns:CharacteristicValue"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="CalendarPartyRole" type="tns:CalendarPartyRole"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.InvolvementRole-->
  <xs:element name="InvolvementRole" type="tns:InvolvementRole"/>
  <xs:complexType name="InvolvementRole">
    <xs:annotation>
      <xs:documentation>All the association from InvolvementRole to the classes above are mutually exclusive, and exactly one of them should exist
for every instance of InvolvementRole</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="involvementRole" type="xs:string"/>
      <xs:element minOccurs="0" name="validFor" type="tns:TimePeriod"/>
    </xs:sequence>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.TimePeriod-->
  <xs:element name="TimePeriod" type="tns:TimePeriod"/>
  <xs:complexType name="TimePeriod">
    <xs:annotation>
      <xs:documentation>A base / value business entity used to represent a period of time, between two timepoints</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="startDateTime" type="xs:string"/>
      <xs:element minOccurs="0" name="endDateTime" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.PartyRoleCategory-->
  <xs:element name="PartyRoleCategory" type="tns:PartyRoleCategory"/>
  <xs:complexType name="PartyRoleCategory">
    <xs:annotation>
      <xs:documentation>This is an entity that can be used to provide simple grouping or categorization of PartyRoles. In some cases this is done in a more specific manner (e.g. Customer demographics).</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="categoryName" type="xs:string">
        <xs:annotation>
          <xs:documentation>The name of the category</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.PhysicalContainer-->
  <xs:element name="PhysicalContainer" type="tns:PhysicalContainer"/>
  <xs:complexType name="PhysicalContainer">
    <xs:annotation>
      <xs:documentation>This is an abstract class that is used to add additional semantics to the ManagedHardware class. Its attributes define whether a ManagedHardware object can be removed and/or replaced, and whether this action requires power to be removed or not when the action is performed.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:ManagedHardware">
        <xs:sequence>
          <xs:element minOccurs="0" name="hotSwappable" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This is a Boolean attribute that defines whether it is possible to replace this object instance with a physically different, but equivalent, object instance while the containing Equipment has power applied to it. TRUE means that it is HotSwappable, and FALSE means that it is not.

All HotSwappable PhysicalComponents are inherently Removable and Replaceable.

This is a required attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="removable" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This is a Boolean that defines whether it is possible to insert and remove this object instance from the Equipment in which it is installed, without impairing the function or packaging of the Equipment. TRUE means that it is removable, and FALSE means that it is not.

A Package can still be Removable if power must be 'off' in order to perform the removal. If power can be 'on' and this object instance can still be removed, then this object instance is both Removable and HotSwappable.

This is a required attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="replaceable" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This is a Boolean that defines whether it is possible to replace this object instance with a physically different instance of the same type. For example, some types of device allow various Chips to be upgraded. TRUE means that it is replaceable, and FALSE means that it is not.

All Removable packages are inherently Replaceable.

This is a required attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.PhysicalDevice-->
  <xs:element name="PhysicalDevice" type="tns:PhysicalDevice"/>
  <xs:complexType name="PhysicalDevice">
    <xs:annotation>
      <xs:documentation>This is an abstract base class for representing hardware devices that can be managed. This class represents a convenient aggregation point for combining different aspects of a device (e.g., the cables, connectors, cards, power supplies, and other objects that together make up the device). Thus, it enables the device itself to have a physical manifestation (e.g., the "Internet Gateway Router" can be identified as a PhysicalDevice). Examples of this class include routers and switches, computers, and other end-devices that are managed.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:PhysicalResource">
        <xs:sequence>
          <xs:element minOccurs="0" name="backplaneIndependent" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This is a boolean attribute that, if TRUE, indicates that this ManagedDevice has independent backplanes that can be managed separately. This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="backplaneNumber" type="xs:int">
            <xs:annotation>
              <xs:documentation>This is an integer that defines the number of backplanes that this device has. This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="configurationOrder" type="xs:string">
            <xs:annotation>
              <xs:documentation>This is a free-form string that provides any order-specific instructions for configuring the set of components that together constitute this PhysicalDevice. This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="deviceGroupID" type="xs:string">
            <xs:annotation>
              <xs:documentation>This is a string, and is used to uniquely identify this device as a member of a group of devices. This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="isComposite" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This is a Boolean attribute that, if TRUE, means that this physical device is in reality made up of a set of physical devices, each of which can be individually managed. This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="canMixPower" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This is a Boolean attribute that, if TRUE, means that AC and/or DC power supplies can be used in this device. If it is false, then only one or the other can be used.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="EMSName" type="xs:string"/>
          <xs:element minOccurs="0" name="EMSHostName" type="xs:string"/>
          <xs:element minOccurs="0" name="NMSType" type="xs:string"/>
          <xs:element minOccurs="0" name="NMSHostName" type="xs:string"/>
          <xs:element minOccurs="0" name="SNMPObjectID" type="xs:string"/>
          <xs:element minOccurs="0" name="telnetConnectivity" type="xs:string"/>
          <xs:element minOccurs="0" name="chassisSerialNumber" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ConsistsOf" type="tns:Hardware"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="HasPhysicalDeviceRoles" type="tns:PhysicalDeviceRole"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ConsistsOfRack" type="tns:Rack"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ConsistsOfShelf" type="tns:Shelf"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="HasPorts" type="tns:PhysicalPort"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="IPAddress" type="tns:IPAddress"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="AllowableSFPDetails" type="tns:CardOnCardDetails"/>
          <!--Added below Element Tag to support associated TopologyName for a Device-->
          <xs:element maxOccurs="unbounded" minOccurs="0" name="AssociatedTopology" type="tns:SubNetworkConnection"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.PhysicalDeviceRole-->
  <xs:element name="PhysicalDeviceRole" type="tns:PhysicalDeviceRole"/>
  <xs:complexType name="PhysicalDeviceRole">
    <xs:annotation>
      <xs:documentation>This is an abstract base class that defines the different types of physical roles that a PhysicalDevice can take on. This enables us to correlate different logical roles to physical hardware. For example, the logical capability of encryption may need dedicated physical hardware. The PhysicalDeviceRole Encryption enables us to model this dependency.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:PhysicalResourceRole">
        <xs:sequence/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.PhysicalPort-->
  <xs:element name="PhysicalPort" type="tns:PhysicalPort"/>
  <xs:complexType name="PhysicalPort">
    <xs:annotation>
      <xs:documentation>This class represents an actual or potential end point of a topological (physical) link, and corresponds directly to a physical port on a topology map. PhysicalPorts are always contained by another physical object - they can't exist by themselves. The two most common examples are PhysicalPorts on a Card and on a Chassis.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:ManagedHardware">
        <xs:sequence>
          <xs:element minOccurs="0" name="duplexMode" type="xs:int">
            <xs:annotation>
              <xs:documentation>This is an enumerated integer that defines the duplex mode of this port. Values are:

 0: Unknown
 1: Full Duplex
 2: Half Duplex

This is a REQUIRED attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="ifType" type="xs:int">
            <xs:annotation>
              <xs:documentation>This is an enumerated integer, and specifies the particular media type of the link. This attribute provides additional detail beyond that provided in the ifType of an ifEntry of a MIB (e.g., distinguishing between 10Base and 100Base ethernet). Values include:

 0: Unknown
 1: 10BaseT
 2: 100BaseT
 3: 10-100BaseT
 4: 1000BaseT
 5: 10000BaseT
 6: DS-0
 7: DS-1
 8: DS-3
 9: OC-3
10: OC-12
11: OC-48
12: OC-192

This is a REQUIRED attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="portNumber" type="xs:int">
            <xs:annotation>
              <xs:documentation>This is a non-zero integer that uniquely identifies this PhysicalPort instance from all other instances. This is a REQUIRED attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="typeOfPPort" type="xs:int">
            <xs:annotation>
              <xs:documentation>This is an enumerated integer that defines the particular type of PhysicalPort this instance is. Values include:

0: Unknown
1: Ethernet
2: FastEthernet
3: Auto-Sensing
4: GigabitEthernet
5: FastGigabitEthernet
6: DS-0
7: DS-1
8: DS-3
9: T1
10: T3
11: E1
12: E3
13: OC-3
14: OC-12
15: OC-48
16: OC-192
17: RS-232C

This is a REQUIRED attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="vendorPortName" type="xs:string">
            <xs:annotation>
              <xs:documentation>This is a string that contains the vendor-specific name of this port. This is different from the commonName attribute, which represents a system-wide naming structure for all ManagedEntities.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="pluggableType" type="xs:string"/>
          <xs:element minOccurs="0" name="wavelength" type="xs:string"/>
          <xs:element minOccurs="0" name="bandwidth" type="xs:string"/>
          <xs:element minOccurs="0" name="portFunction" type="xs:string"/>
          <xs:element minOccurs="0" name="DPEA" type="xs:string"/>
          <xs:element minOccurs="0" name="markedForDeletion" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ConnectionTerminationPoint" type="tns:ConnectionTerminationPoint"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.PhysicalResource-->
  <xs:element name="PhysicalResource" type="tns:PhysicalResource"/>
  <xs:complexType name="PhysicalResource">
    <xs:annotation>
      <xs:documentation>This is an abstract base class for describing different types of hardware that constitute a Product. It has two main purposes: (1) to collect common attributes and relationships for all hardware, and (2) to provide a convenient, single point where relationships with other managed objects can be defined.

The HasWarrantyInfo association (not shown) describes warranty information of hardware.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:Resource">
        <xs:sequence>
          <xs:element minOccurs="0" name="manufactureDate" type="xs:string">
            <xs:annotation>
              <xs:documentation>This is a string attribute that defines the date of manufacture of this item in the fixed format "dd/mm/yyyy". This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="otherIdentifier" type="xs:string">
            <xs:annotation>
              <xs:documentation>This is a string that is used to contain other important identifying data, such as a bar code, of the hardware item. This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="powerState" type="xs:int">
            <xs:annotation>
              <xs:documentation>This is an enumerated integer that defines the current power status of the hardware item. Values include:

 0: Unknown
 1: Not Applicable
 2: No Power Applied
 3: Full Power Applied
 4: Power Save - Normal
 5: Power Save - Degraded
 6: Power Save - Standby
 7: Power Save - Critical
 8: Power Save - Low Power Mode
 9: Power Save - Unknown
 10: Power Cycle
 11: Power Warning
 12: Power Off

Value 1 means that the hardware item doesn't require the direct application of power (e.g., a but or bolt). If the value for this item is 3, then the PowerCapability class will describe the particular power requirements of this item through the HasPower association.

This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="serialNumber" type="xs:string">
            <xs:annotation>
              <xs:documentation>This is a string that represents a manufacturer-allocated number used to identify different instances of the same hardware item. The ModelNumber and PartNumber attributes are used to identify different types of hardware items. This is a REQUIRED attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="versionNumber" type="xs:string">
            <xs:annotation>
              <xs:documentation>This is a string that identifies the version of this object. This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="manufacturer" type="xs:string"/>
          <xs:element minOccurs="0" name="prStatus" type="xs:string"/>
          <xs:element minOccurs="0" name="model" type="xs:string"/>
          <xs:element minOccurs="0" name="vendor" type="xs:string"/>
          <xs:element minOccurs="0" name="vendorPartName" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ResourceProvidesLocalPlaces" type="tns:LocalPlace"/>
          <!--Rashmi Lion starts-->
          <xs:element maxOccurs="unbounded" minOccurs="0" name="PhysicalResourceInNetwork" type="tns:Network"/>
          <!--Rashmi Lion Ends-->
          <xs:element minOccurs="0" name="InstalledAtAddress" type="tns:AmericanPropertyAddress"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--Rashmi Start-->
  <xs:element name="Network" type="tns:Network"/>
  <xs:complexType name="Network">
    <xs:complexContent>
      <xs:extension base="tns:Resource">
        <xs:sequence>
          <xs:element minOccurs="0" name="isNetworkOperational" type="xs:boolean"/>
          <xs:element minOccurs="0" name="layerRates" type="xs:string"/>
          <xs:element minOccurs="0" name="networkAdministrativeState" type="xs:int"/>
          <xs:element minOccurs="0" name="networkAlarmStatus" type="xs:int"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--Rashmi End-->
  <!--Rashmi Lion Starts for Flow Domain-->
  <xs:element name="Flow" type="tns:Flow"/>
  <xs:complexType name="Flow">
    <xs:complexContent>
      <xs:extension base="tns:LogicalResource">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="FlowDomain" type="tns:FlowDomain"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="LinkFlow" type="tns:FlowDomainFragment"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="FlowDomain" type="tns:FlowDomain"/>
  <xs:complexType name="FlowDomain">
    <xs:complexContent>
      <xs:extension base="tns:LogicalResource">
        <xs:sequence>
          <xs:element minOccurs="0" name="connectivityState" type="xs:string"/>
          <xs:element minOccurs="0" name="type" type="tns:FlowDomainType"/>
          <xs:element minOccurs="0" name="FlowDomainContainedIn" type="tns:ManagementDomain"/>
          <!--Check type-->
          <xs:element minOccurs="0" name="ituArcStateAndStatusList" type="xs:string"/>
          <!--Check type-->
          <xs:element maxOccurs="unbounded" minOccurs="0" name="transmissionParameterList" type="xs:string"/>
          <!--FlowDominaFlow-->
          <xs:element maxOccurs="unbounded" minOccurs="0" name="FlowDomainFlow" type="tns:MatrixFlowDomain"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="FlowDomainFragment" type="tns:FlowDomainFragment"/>
  <xs:complexType name="FlowDomainFragment">
    <xs:complexContent>
      <xs:extension base="tns:LogicalResource">
        <xs:sequence>
          <xs:element minOccurs="0" name="administrativeState" type="tns:ControlState"/>
          <xs:element minOccurs="0" name="direction" type="tns:ConnectionDirection">
            <xs:annotation>
              <xs:documentation>This attribute represents the directionality of the FDFr.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="isFlexible" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This attribute indicates whether the FDFr is fixed (= True) or is flexible (= False).</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="state" type="tns:SubnetworkConnectionState">
            <xs:annotation>
              <xs:documentation>This attribute indicates if the FDFr is active or partial.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="type" type="tns:FlowDomainFragmentType">
            <xs:annotation>
              <xs:documentation>This attribute indicates the type of the FDFr.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="aEndTpDataList" type="tns:TerminationPoint"/>
          <xs:element minOccurs="0" name="FdfrIsCharacterisedByFdfrRoute" type="tns:FlowDomainFragmentRoute"/>
          <xs:element minOccurs="0" name="FlowDomainFragmentContainedIn" type="tns:FlowDomain"/>
          <xs:element minOccurs="0" name="ituArcStateAndStatusList" type="xs:string"/>
          <xs:element minOccurs="0" name="transmissionParameterList" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="zEndTpDataList" type="tns:TerminationPoint"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="FlowDomainFragmentRoute" type="tns:FlowDomainFragmentRoute"/>
  <xs:complexType name="FlowDomainFragmentRoute">
    <xs:sequence>
      <xs:element minOccurs="0" name="actualState" type="tns:ActualState"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="containedMfdfrList" type="tns:MatrixFlowDomainFragment"/>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="FlowDomainFragmentType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="MULTIPOINT"/>
      <xs:enumeration value="POINT_TO_MULTIPOINT"/>
      <xs:enumeration value="POINT_TO_POINT"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="FlowDomainType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="NETWORK"/>
      <xs:enumeration value="SINGLETON"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:element name="MatrixFlowDomain" type="tns:MatrixFlowDomain"/>
  <xs:complexType name="MatrixFlowDomain">
    <xs:annotation>
      <xs:documentation>This object class is contained within a Managed Element (ME) and represents a grouping of assigned Connectionless Port Termination Points (CPTPs). 
See R_TMF518_NRF_I_0047 and R_TMF518_NRF_I_0048.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:LogicalResource">
        <xs:sequence>
          <xs:element minOccurs="0" name="isFlexible" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This attribute indicates whether the MFD is fixed and cannot be configured by the NMS (= False) or is flexible (= True).</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="tmdState" type="tns:TransmissionDescriptorState">
            <xs:annotation>
              <xs:documentation>This attribute contains the state of consistency between a TP and its associated egress TransmissionDescriptor.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="FdHasAssociatedMfds" type="tns:FlowDomain"/>
          <!--check Type-->
          <xs:element minOccurs="0" name="ituArcStateAndStatusList" type="xs:string"/>
          <xs:element minOccurs="0" name="MatrixFlowDomainContainedIn" type="tns:ManagedEntity"/>
          <!--check Type-->
          <xs:element maxOccurs="unbounded" minOccurs="0" name="transmissionParameterList" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="FlowPoint" type="tns:TerminationPoint"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: sidmodels.ResourceDomain.ResourceABE.LogicalResourceABE.TIPLogicalResourceABE.NetworkResourceFulfillmentABE.MatrixFlowDomainFragment-->
  <xs:element name="MatrixFlowDomainFragment" type="tns:MatrixFlowDomainFragment"/>
  <xs:complexType name="MatrixFlowDomainFragment">
    <xs:sequence>
      <xs:element minOccurs="0" name="direction" type="tns:ConnectionDirection"/>
      <xs:element minOccurs="0" name="isActive" type="xs:boolean"/>
      <xs:element minOccurs="0" name="isFlexible" type="xs:boolean"/>
      <xs:element minOccurs="0" name="mfdfrType" type="tns:FlowDomainFragmentType"/>
      <xs:element minOccurs="0" name="FdfrContainsMfdfrs" type="tns:FlowDomainFragment"/>
      <xs:element minOccurs="0" name="FdfrRouteContainsMfdfrs" type="tns:FlowDomainFragmentRoute"/>
      <xs:element minOccurs="0" name="MfdContainsMfdfrs" type="tns:MatrixFlowDomain"/>
      <!--check Type "xs:String"-->
      <xs:element minOccurs="0" name="transmissionParameterList" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <!--The type: sidmodels.ProductDomain.ProductOfferingABE.PricingLogicAlgorithmABE.PLASpecABE.MatrixSpecDimension-->
  <xs:element name="MatrixSpecDimension" type="tns:MatrixSpecDimension"/>
  <xs:complexType name="MatrixSpecDimension">
    <xs:annotation>
      <xs:documentation>A specification of a single dimension of MatrixCharacteristic. Each dimension is defined by a single CharacteristicSpecification or ProductSpecCharacteristic which specifies the legal values for this dimension.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="seqNum" type="xs:int">
        <xs:annotation>
          <xs:documentation>The sequential (ordered) number of this dimension</xs:documentation>
        </xs:annotation>
      </xs:element>
      <!--<xs:element name="DimensionDefinedByCharSpec" type="tns:CharacteristicSpecification" minOccurs="0"/>
			<xs:element name="DimensionDefinedByProductSpecChar" type="tns:ProductSpecCharacteristic" minOccurs="0"/>-->
      <xs:element minOccurs="0" name="validFor" type="tns:TimePeriod"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="CreateFlowRequest" type="tns:CreateFlowRequest"/>
  <xs:complexType name="CreateFlowRequest">
    <xs:complexContent>
      <xs:extension base="tns:OperationRequest">
        <xs:sequence>
          <xs:element minOccurs="0" name="Flow" type="tns:Flow"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="CreateFlowResponse" type="tns:CreateFlowResponse"/>
  <xs:complexType name="CreateFlowResponse">
    <xs:complexContent>
      <xs:extension base="tns:OperationResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="Flow" type="tns:Flow"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DeleteFlowRequest" type="tns:DeleteFlowRequest"/>
  <xs:complexType name="DeleteFlowRequest">
    <xs:complexContent>
      <xs:extension base="tns:OperationRequest">
        <xs:sequence>
          <xs:element minOccurs="0" name="Flow" type="tns:Flow"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DeleteFlowResponse" type="tns:DeleteFlowResponse"/>
  <xs:complexType name="DeleteFlowResponse">
    <xs:complexContent>
      <xs:extension base="tns:OperationResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="Flow" type="tns:Flow"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="UpdateFlowRequest" type="tns:UpdateFlowRequest"/>
  <xs:complexType name="UpdateFlowRequest">
    <xs:complexContent>
      <xs:extension base="tns:OperationRequest">
        <xs:sequence>
          <xs:element minOccurs="0" name="Flow" type="tns:Flow"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="UpdateFlowResponse" type="tns:UpdateFlowResponse"/>
  <xs:complexType name="UpdateFlowResponse">
    <xs:complexContent>
      <xs:extension base="tns:OperationResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="Flow" type="tns:Flow"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--Rashmi Lion Ends for Flow Domain-->
  <!--Gautam Lion starts for Flow Domain-->
  <xs:element name="CreateFlowDomainRequest" type="tns:CreateFlowDomainRequest"/>
  <xs:complexType name="CreateFlowDomainRequest">
    <xs:complexContent>
      <xs:extension base="tns:OperationRequest">
        <xs:sequence>
          <xs:element minOccurs="0" name="FlowDomain" type="tns:FlowDomain"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="CreateFlowDomainResponse" type="tns:CreateFlowDomainResponse"/>
  <xs:complexType name="CreateFlowDomainResponse">
    <xs:complexContent>
      <xs:extension base="tns:OperationResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="FlowDomain" type="tns:FlowDomain"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--Gautam Lion Ends for Flow Domain-->
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.PhysicalResourceRole-->
  <xs:element name="PhysicalResourceRole" type="tns:PhysicalResourceRole"/>
  <xs:complexType name="PhysicalResourceRole">
    <xs:annotation>
      <xs:documentation>This is an abstract base class that defines the concept of various types of roles that can be associated with PhysicalResources.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:ResourceRole">
        <xs:sequence/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.Place-->
  <xs:element name="Place" type="tns:Place"/>
  <xs:complexType name="Place">
    <xs:annotation>
      <xs:documentation>Place answers the question "where ?"It is an abstract modeling concept that provides a linking point to other parts of the SID model.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:Entity">
        <xs:sequence>
          <xs:element minOccurs="0" name="id" type="xs:string">
            <xs:annotation>
              <xs:documentation>Unique identifier for Place</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="PlaceLocatesResource" type="tns:Resource"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.PoBoxAddress-->
  <xs:element name="PoBoxAddress" type="tns:PoBoxAddress"/>
  <xs:complexType name="PoBoxAddress">
    <xs:complexContent>
      <xs:extension base="tns:PostalDeliveryAddress">
        <xs:sequence>
          <xs:element minOccurs="0" name="boxType" type="xs:anySimpleType"/>
          <xs:element minOccurs="0" name="boxNr" type="xs:anySimpleType"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.Point2PointCircuit-->
  <xs:element name="Point2PointCircuit" type="tns:Point2PointCircuit"/>
  <xs:complexType name="Point2PointCircuit">
    <xs:complexContent>
      <xs:extension base="tns:TopologicalLink">
        <xs:sequence>
          <xs:element minOccurs="0" name="transportType" type="xs:string"/>
          <xs:element minOccurs="0" name="CDD" type="xs:string"/>
          <!--This is added to support the Protection Protocol for the ENNI Service as part of CR4594-AUC393816-->
          <xs:element minOccurs="0" name="apsProtocolType" type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.PostalDeliveryAddress-->
  <xs:element name="PostalDeliveryAddress" type="tns:PostalDeliveryAddress"/>
  <xs:complexType name="PostalDeliveryAddress">
    <xs:complexContent>
      <xs:extension base="tns:LogicalAddress"/>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.BandwidthProfile-->
  <xs:element name="BandwidthProfile" type="tns:BandwidthProfile"/>
  <xs:complexType name="BandwidthProfile">
    <xs:complexContent>
      <xs:extension base="tns:Entity">
        <xs:sequence>
          <xs:element minOccurs="0" name="bandwidth" type="xs:string"/>
          <xs:element minOccurs="0" name="committedInformationRate" type="xs:string"/>
          <xs:element minOccurs="0" name="committedBurstSize" type="xs:string"/>
          <xs:element minOccurs="0" name="excessInformationRate" type="xs:string"/>
          <xs:element minOccurs="0" name="excessBurstSize" type="xs:string"/>
          <xs:element minOccurs="0" name="couplingFlag" type="xs:string"/>
          <xs:element minOccurs="0" name="colorMode" type="xs:string"/>
          <!--Added 'CoS' as part of R6:AUC260567-->
          <xs:element minOccurs="0" name="CoS" type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: Added Maintenance End Point : R6 : NIC : Circuit/Service Modeling AUC263845-->
  <xs:element name="MaintenanceEndPoint" type="tns:MaintenanceEndPoint"/>
  <xs:complexType name="MaintenanceEndPoint">
    <xs:complexContent>
      <xs:extension base="tns:Entity">
        <xs:sequence>
          <xs:element minOccurs="0" name="aliasName" type="xs:string"/>
          <xs:element minOccurs="0" name="MEGLevel" type="xs:string"/>
          <xs:element minOccurs="0" name="PrimaryVLANID" type="xs:string"/>
          <xs:element minOccurs="0" name="Direction" type="xs:string"/>
          <xs:element minOccurs="0" name="MACAddress" type="xs:string"/>
          <xs:element minOccurs="0" name="CCIEnabled" type="xs:string"/>
          <xs:element minOccurs="0" name="CCMLTMPriority" type="xs:string"/>
          <xs:element minOccurs="0" name="LowestPriorityDefect" type="xs:string"/>
          <xs:element minOccurs="0" name="FaultAlarmTime" type="xs:string"/>
          <xs:element minOccurs="0" name="FaultResetTime" type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.ProtectionRole-->
  <xs:simpleType name="ProtectionRole">
    <xs:restriction base="xs:string">
      <xs:enumeration value="BACKUP"/>
      <xs:enumeration value="NOT_APPLICABLE"/>
      <xs:enumeration value="PRIMARY"/>
    </xs:restriction>
  </xs:simpleType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.ProtectionSchemeState-->
  <xs:simpleType name="ProtectionSchemeState">
    <xs:restriction base="xs:string">
      <xs:enumeration value="AUTOMATIC"/>
      <xs:enumeration value="FORCED_OR_LOCKED_OUT"/>
      <xs:enumeration value="UNKNOWN"/>
    </xs:restriction>
  </xs:simpleType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.Rack-->
  <xs:element name="Rack" type="tns:Rack"/>
  <xs:complexType name="Rack">
    <xs:annotation>
      <xs:documentation>A Rack is a type of SecureHolder that represents an enclosure in which EquipmentHolders, such as Chassis, are placed. Typically a Rack is nothing more than the enclosure, and all the functioning componentry is packaged in the Chassis.

Note that the logical identifier of a Rack is NOT typically associated with the Device (i.e., the NetworkElement). Compare this to either a Bay or a Shelf, whose logical identifier IS associated with the Device. This means that the Rack is explicitly NOT a part of the logical model of a network.

The Rack typically serves as the "master enclosure" for Chassis, Shelves and Bays. In addition, Racks can have multiple instances of multiple Devices mounted in them.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:SecureHolder">
        <xs:sequence>
          <xs:element minOccurs="0" name="country" type="xs:string">
            <xs:annotation>
              <xs:documentation>This is the designation of the country for which the Rack is designed. Country code strings are as defined by ISO/IEC 3166. This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="heightInUs" type="xs:int">
            <xs:annotation>
              <xs:documentation>This is the height of the Rack in 'U's. A 'U' is a standard unit of measure for the height of a Rack or rack-mountable components. It is equal to 1.75 inches or 4.445 cm. This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="typeOfRack" type="xs:int">
            <xs:annotation>
              <xs:documentation>This is an enumerated integer that defines the type of Rack. Values include:

 0: Unknown
 1: Standard 19 Inch
 2: Telco
 3: Equipment Shelf
 4: Non-Standard

This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ConsistsOfShelf" type="tns:Shelf"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="AllowableShelf" type="tns:Shelf"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.Remarks-->
  <xs:element name="Remarks" type="tns:Remarks"/>
  <xs:complexType name="Remarks">
    <xs:complexContent>
      <xs:extension base="tns:RootEntity">
        <xs:sequence>
          <xs:element minOccurs="0" name="ID" type="xs:string"/>
          <xs:element minOccurs="0" name="type" type="xs:string"/>
          <xs:element minOccurs="0" name="text" type="xs:string"/>
          <xs:element minOccurs="0" name="reference" type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.Reroute-->
  <xs:simpleType name="Reroute">
    <xs:restriction base="xs:string">
      <xs:enumeration value="NO"/>
      <xs:enumeration value="NOT_SET"/>
      <xs:enumeration value="YES"/>
    </xs:restriction>
  </xs:simpleType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.RerouteAllowed-->
  <xs:simpleType name="RerouteAllowed">
    <xs:restriction base="xs:string">
      <xs:enumeration value="NO"/>
      <xs:enumeration value="NOT_APPLICABLE"/>
      <xs:enumeration value="YES"/>
    </xs:restriction>
  </xs:simpleType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.Resource-->
  <xs:element name="Resource" type="tns:Resource"/>
  <xs:complexType name="Resource">
    <xs:annotation>
      <xs:documentation>This object class defines the attributes that are common to all resource objects.
See R_TMF518_NRB_I_0001.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:ManagedEntity">
        <xs:sequence>
          <xs:element minOccurs="0" name="additionalInfo" type="xs:string"/>
          <xs:element minOccurs="0" name="aliasName" type="xs:string"/>
          <xs:element minOccurs="0" name="aliasName2" type="xs:string"/>
          <xs:element minOccurs="0" name="usageState" type="xs:string">
            <xs:annotation>
              <xs:documentation>This is an enumerated integer that defines the current usage of the object. It includes the following values:

 0: Unknown
 1: Not Installed
 2: Installed
 3: Inactive
 4: Idle
 5: Active, but able to communicate
 6: Busy (Active and unable to communicate)

Value 2 means that the object is installed (or otherwise activated) but no other information about its state is available. Values 3-6 imply that the object is Installed, and provide further information as to its state.

This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="functionalStatus" type="xs:string"/>
          <xs:element minOccurs="0" name="CLLICode" type="xs:string"/>
          <xs:element minOccurs="0" name="locationCLLI" type="xs:string"/>
          <xs:element minOccurs="0" name="HECIG" type="xs:string"/>
          <xs:element minOccurs="0" name="MCO" type="xs:string"/>
          <xs:element minOccurs="0" name="ResourceType" type="xs:string"/>
          <xs:element minOccurs="0" name="ResourceSubType" type="xs:string"/>
          <xs:element minOccurs="0" name="action" type="xs:string"/>
          <xs:element minOccurs="0" name="validFor" type="tns:TimePeriod"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ResourcesInManagementDomain" type="tns:ManagementDomain"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="RFServiceConfiguredUsing" type="tns:ResourceFacingService"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ResourceTakesOnRoles" type="tns:ResourceRole"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ResourceDescribedBy" type="tns:ResourceCharacteristicValue"/>
          <xs:element minOccurs="0" name="OwnsResourceDetails" type="tns:OwnsResourceDetails"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ResourceRelationship" type="tns:ResourceRelationship"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="AdministerResourceDetails" type="tns:AdministerResourceDetails"/>
          <!--Added CreationDate as part of EVC/OVC membership requirement AUC260563-->
          <xs:element minOccurs="0" name="CreationDate" type="xs:string"/>
          <!--Added ModificationDate as part of EVC/OVC membership requirement AUC260563-->
          <xs:element minOccurs="0" name="ModificationDate" type="xs:string"/>
          <!--Added AffectedServiceTypeList as part of R6 NIC Alarm Enrichment AUC244952, AUC244953-->
          <xs:element minOccurs="0" name="AffectedServiceTypeList" type="tns:AffectedServiceTypeList"/>
          <!--Added EVCRestoreImage as part of LION US126400-->
          <xs:element maxOccurs="unbounded" minOccurs="0" name="EVCRestoreImage" type="tns:EVCCircuit"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--Added AffectedServiceTypeList as part of R6 NIC Alarm Enrichment AUC244952, AUC244953-->
  <xs:complexType name="AffectedServiceTypeList">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="AffectedServiceTypeValue" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.AdministerResourceDetails-->
  <xs:element name="AdministerResourceDetails" type="tns:AdministerResourceDetails"/>
  <xs:complexType name="AdministerResourceDetails">
    <xs:complexContent>
      <xs:extension base="tns:Entity">
        <xs:sequence>
          <xs:element minOccurs="0" name="GrantsResourceAdminRights" type="tns:OwnsResourceDetails"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.ResourceCharacteristicValue-->
  <xs:element name="ResourceCharacteristicValue" type="tns:ResourceCharacteristicValue"/>
  <xs:complexType name="ResourceCharacteristicValue">
    <xs:annotation>
      <xs:documentation>A value of a ResourceSpecCharacteristic chosen for a Resource that further defines what the Resource is.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="CharacteristicName" type="xs:string"/>
      <xs:element minOccurs="0" name="CharacteristicValue" type="xs:string"/>
      <xs:element minOccurs="0" name="value" type="xs:string">
        <xs:annotation>
          <xs:documentation>A fact that describes an entity.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="ResourceCharValueReferences" type="tns:ResourceCharacteristicValue"/>
    </xs:sequence>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.ServiceCharacteristicValue-->
  <xs:element name="ServiceCharacteristicValue" type="tns:ServiceCharacteristicValue"/>
  <xs:complexType name="ServiceCharacteristicValue">
    <xs:annotation>
      <xs:documentation>A value of a ResourceSpecCharacteristic chosen for a Resource that further defines what the Resource is.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="CharacteristicName" type="xs:string"/>
      <xs:element minOccurs="0" name="CharacteristicValue" type="xs:string"/>
      <xs:element minOccurs="0" name="value" type="xs:string">
        <xs:annotation>
          <xs:documentation>A fact that describes an entity.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="ServiceCharValueReferences" type="tns:ServiceCharacteristicValue"/>
    </xs:sequence>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.ResourceCharacteristicValueList-->
  <xs:element name="ResourceCharacteristicValueList" type="tns:ResourceCharacteristicValueList"/>
  <xs:complexType name="ResourceCharacteristicValueList">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="ResourceCharacteristicValue" type="tns:ResourceCharacteristicValue"/>
    </xs:sequence>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.ResourceFacingService-->
  <xs:element name="ResourceFacingService" type="tns:ResourceFacingService"/>
  <xs:complexType name="ResourceFacingService">
    <xs:annotation>
      <xs:documentation>This is an abstract base class for ResourceFacingServices. A ResourceFacingService is an abstraction that defines the characteristics and behavior of a particular Service that is not directly seen or purchased by the Customer. ResourceFacingServices are ;internal Services that are required to support a CustomerFacingService. The Customer obtains CustomerFacingServices via Products, and is not aware of the ResourceFacingServices which support the CustomerFacingService(s) that is being obtained directly by the Customer via a Product. For example, a VPN is an example of a CustomerFacingService. This particular type of VPN may require BGP to support it. Customers donot purchase BGP, and hopefully arenot even aware that BGP is running. Therefore, BGP is an example of a ResourceFacingService. 

 

CustomerFacingServices are directly related to Products as well as to ResourceFacingServices. ResourceFacingServices are indirectly related to Products through the relationship between Product and Resource. This enforces the relationship to Products while keeping Services that are not directly obtainable via Products (i.e., ResourceFacingServices) separated from Products.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:Service">
        <xs:sequence>
          <xs:element minOccurs="0" name="rfsStatus" type="xs:int">
            <xs:annotation>
              <xs:documentation>This is an enumerated integer that defines the status of this particular ResourceFacingService. Values include:

 0: Operational and supporting CFS
 1: Degraded but supporting CFS
 2: In Violation and not supporting CFS
 3: Operational but not yet supporting a CFS
 4: Being Tested
 5: Being Deployed
 6: Failed

Value 0 means that this ResourceFacingService is acting per specification, and is also currently supporting one or more CustomerFacingServices.

Value 1 means that this ResourceFacingService is operational, but is currently in a degraded state. This degraded state indicates congestion or some other problem, but has not yet comprimised the operation of its associated CustomerFacingServices.

Value 2 means that this ResourceFacingService is operational, but is currently in violation of its associated specification(s). This in turn means that its associated CustomerFacingServices are violating their contractual specification(s) unless automatic fail-over has been enabled.

Value 3 means that this ResourceFacingService is acting per specification, but is not yet currently supporting one or more CustomerFacingServices.

Value 4 means that this ResourceFacingService is currently being tested, and is not yet ready to support a CustomerFacingService.

Value 5 means that this ResourceFacingService is currently being deployed, and is not yet ready to support a CustomerFacingService.

Value 6 means that this ResourceFacingService has currently failed. The set of actions that should be taken, as well as whether this service can still be billed or not, are determined by its associated Policy for handling service violations.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.ResourceFacingServiceComposite-->
  <xs:element name="ResourceFacingServiceComposite" type="tns:ResourceFacingServiceComposite"/>
  <xs:complexType name="ResourceFacingServiceComposite">
    <xs:annotation>
      <xs:documentation>This is an abstract base class that defines an integrated set of ResourceFacingServices that collectively meets the needs of a CustomerFacingService. For example, the Customer may have requested "GoldService", which is a ServicePackage that defines a set of ServiceBundles, each of which has its own QoS. A set of ResourceFacingServiceProducts can then be defined, one for each different ServiceBundle instance, that provides the required QoS for each ServiceBundle instance.

Please see the DEN-ng Service Model whitepaper for more information and examples.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:ResourceFacingService">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="RFSCompositeHasRFServices" type="tns:ResourceFacingService"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.ResourceFulfillmentState-->
  <xs:simpleType name="ResourceFulfillmentState">
    <xs:restriction base="xs:string">
      <xs:enumeration value="IN_SERVICE"/>
      <xs:enumeration value="OUT_OF_SERVICE"/>
      <xs:enumeration value="OUT_OF_SERVICE_BY_MAINTENANCE"/>
      <xs:enumeration value="SERVICE_STATE_NOT_APPLICABLE"/>
    </xs:restriction>
  </xs:simpleType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.ResourceRelationship-->
  <xs:element name="ResourceRelationship" type="tns:ResourceRelationship"/>
  <xs:complexType name="ResourceRelationship">
    <xs:complexContent>
      <xs:extension base="tns:Entity">
        <xs:sequence>
          <xs:element minOccurs="0" name="typeOfRDependency" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="IPAddress" type="tns:IPAddress"/>
          <!--Added below as part of AUC260567 Update Membership-->
          <xs:element maxOccurs="unbounded" minOccurs="0" name="TerminationPoint" type="tns:TerminationPoint"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="CTP" type="tns:ConnectionTerminationPoint"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="PTP" type="tns:PhysicalPort"/>
          <xs:element minOccurs="0" name="Device" type="tns:PhysicalDevice"/>
          <xs:element minOccurs="0" name="Circuit" type="tns:Point2PointCircuit"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="Protocol" type="tns:Protocol"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="Resource" type="tns:Resource"/>
          <!--Added AddressDetails for CR4701 R2 AUC257982-->
          <xs:element maxOccurs="unbounded" minOccurs="0" name="AddressDetails" type="tns:AmericanPropertyAddress"/>
          <!--LION FlowPoints-->
          <xs:element maxOccurs="unbounded" minOccurs="0" name="FlowPoint" type="tns:TerminationPoint"/>
          <!--LION FlowPoints-->
          <xs:element maxOccurs="unbounded" minOccurs="0" name="LinkFlow" type="tns:FlowDomainFragment"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="Service" type="tns:Service"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="Route" type="tns:Route"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.ResourceRole-->
  <xs:element name="ResourceRole" type="tns:ResourceRole"/>
  <xs:complexType name="ResourceRole">
    <xs:annotation>
      <xs:documentation>This is an abstract base class that defines the concept of various types of roles associated with Resources (both physical and logical) in the DEN-ng model.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:EntityRole">
        <xs:sequence/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.Role-->
  <xs:element name="Role" type="tns:Role"/>
  <xs:complexType name="Role">
    <xs:annotation>
      <xs:documentation>This is an abstract base class that defines the concept of various types of roles used in the DEN-ng model.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:RootEntity">
        <xs:sequence>
          <xs:element minOccurs="0" name="roleCombination" type="xs:string">
            <xs:annotation>
              <xs:documentation>A roleCombination is an array of string attributes that are used to identify and potentially select one or more policies for a set of managed entities from among a much larger set of available policies. In contrast with the IETF definition, the DEN-ng definition of this attribute works with a second attribute, called roleSelectionMethod, that precisely defines how the selection process is determined.

Values of this attribute should be entered in comma separated value format; white space should be ignored.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="roleSelectionMethod" type="xs:int">
            <xs:annotation>
              <xs:documentation>This is an enumerated integer that defines the precise means used to select one or more entities which map to one or more roles contained in the roleCombination attribute of this object. Values include:

 0: retrieve all
 1: retrieve intersection

For exampe, assume that there is an external query engine that is looking for the roles edge or ethernet. The result of this query will look at the roleCombination and roleSelectionMethod attributes of each managed object that it is querying.

If the value of this attribute is 0, then all managed objects that have their roleCombination set to either {edge}, {ethernet}, or {edge, ethernet} will be retrieved. In contrast, if the value of this attribute is 1, then only those managed objects whose roleCombination attribute is set to {edge, ethernet} will be retrieved.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.RootEntity-->
  <xs:element name="RootEntity" type="tns:RootEntity"/>
  <xs:complexType name="RootEntity">
    <xs:annotation>
      <xs:documentation>This is the top of the SID class hierarchy. The purpose of the RootEntity is to define a set of attributes that are common to all SID entities that derive from it. These properties enable us to name and describe all objects (manageable and unmanageable) in the environment.This is the top of the DEN-ng class hierarchy. These properties enable us to name, describe, and identify all objects (manageable and unmanageable) in the environment.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="commonName" type="xs:string">
        <xs:annotation>
          <xs:documentation>Represents a user-friendly identifier of an object. It is a (possibly ambiguous) name by which the object is commonly known in some limited scope (such as an organization) and conforms to the naming conventions of the country or culture with which it is associated. It is NOT used as a naming attribute (i.e., to uniquely identify an instance of the object).</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="description" type="xs:string">
        <xs:annotation>
          <xs:documentation>This is a string, and defines a textual free-form description of the object.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="objectID" type="xs:string">
        <xs:annotation>
          <xs:documentation>Unambiguously distinguishes different object instances. It is the naming attribute of the object.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="dataOwner" type="xs:string"/>
      <xs:element minOccurs="0" name="sourceSystem" type="xs:string"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="RootEntityDescribedBy" type="tns:CharacteristicValue"/>
    </xs:sequence>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.Route-->
  <xs:element name="Route" type="tns:Route"/>
  <xs:complexType name="Route">
    <xs:annotation>
      <xs:documentation>This object class represents a partially ordered list of Cross-Connects defining the route for a Subnetwork Connection. 
See R_TMF518_NRF_I_0035 and R_TMF518_NRF_I_0036.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="routeIdentifier" type="xs:anySimpleType">
        <xs:annotation>
          <xs:documentation>This attribute contains the unique identifier within the SNC name.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="isIntendedRoute" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>This attribute defines the purpose of the route.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="actualState" type="tns:ActualState">
        <xs:annotation>
          <xs:documentation>This attribute defines the actual summary state of the Cross-Connects (CCs) associated to the Route.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="administrativeState" type="tns:ControlState">
        <xs:annotation>
          <xs:documentation>This attribute defines administratively the role that the Route shall play for the belonging SNC. There is not any relationship with the actualState attribute of the Route. 
It can have the following values: 
- "locked", the route is not allowed to be active 
- "unlocked", the route is allowed to be active.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="isInUseBy" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>This attribute defines if at least one of the routes Cross-Connects or CTPs is carrying traffic of another SNC (True).</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="isExclusive" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>This attribute defines that not any other routes of other SNCs can share any of the routes Cross Connects or CTPs, even in pending state (True).</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="topologicalLinkList" type="tns:TopologicalLink"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="crossConnectList" type="tns:CrossConnect"/>
    </xs:sequence>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.SearchResourceDetails-->
  <xs:element name="SearchResourceDetails" type="tns:SearchResourceDetails"/>
  <xs:complexType name="SearchResourceDetails">
    <xs:complexContent>
      <xs:extension base="tns:RootEntity">
        <xs:sequence>
          <xs:element minOccurs="0" name="entity" type="xs:string"/>
          <xs:element minOccurs="0" name="level" type="xs:string"/>
          <xs:element minOccurs="0" name="scope" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ResourceCharacteristicValue" type="tns:ResourceCharacteristicValue"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ResourceCharacteristicValueList" type="tns:ResourceCharacteristicValueList"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="FilterCriteria" type="tns:ValidationRule"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.SearchResourceRequest-->
  <xs:element name="SearchResourceRequest" type="tns:SearchResourceRequest"/>
  <xs:complexType name="SearchResourceRequest">
    <xs:complexContent>
      <xs:extension base="tns:OperationRequest">
        <xs:sequence>
          <xs:element minOccurs="0" name="SearchResourceDetails" type="tns:SearchResourceDetails"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.SearchResourceResponse-->
  <xs:element name="SearchResourceResponse" type="tns:SearchResourceResponse"/>
  <xs:complexType name="SearchResourceResponse">
    <xs:complexContent>
      <xs:extension base="tns:OperationResponse">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="SearchResponseDetails" type="tns:SearchResponseDetails"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.SearchResourceSpecRequest-->
  <xs:element name="SearchResourceSpecRequest" type="tns:SearchResourceSpecRequest"/>
  <xs:complexType name="SearchResourceSpecRequest">
    <xs:complexContent>
      <xs:extension base="tns:OperationRequest">
        <xs:sequence>
          <xs:element minOccurs="0" name="SearchResourceDetails" type="tns:SearchResourceDetails"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.SearchResourceSpecResponse-->
  <xs:element name="SearchResourceSpecResponse" type="tns:SearchResourceSpecResponse"/>
  <xs:complexType name="SearchResourceSpecResponse">
    <xs:complexContent>
      <xs:extension base="tns:OperationResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="Device" type="tns:PhysicalDevice"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: iclnbi.com.iclnbi.iclnbi.PartyRoleAssociation-->
  <xs:element name="PartyRoleAssociation" type="tns:PartyRoleAssociation"/>
  <xs:complexType name="PartyRoleAssociation">
    <xs:annotation>
      <xs:documentation>Allows PartyRoles to be associated Note that Interaction must be used for associations that are a direct part of the value network</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" name="associationType" type="xs:string"/>
      <xs:element minOccurs="0" name="status" type="xs:string"/>
      <xs:element minOccurs="0" name="PartyRole" type="tns:PartyRole"/>
      <xs:element minOccurs="0" name="validFor" type="tns:TimePeriod">
        <xs:annotation>
          <xs:documentation>the time period that the PartyRoleAssociation is valid for</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.SearchResponseDetails-->
  <xs:element name="SearchResponseDetails" type="tns:SearchResponseDetails"/>
  <xs:complexType name="SearchResponseDetails">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="Party" type="tns:Party"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="AddressDetails" type="tns:AmericanPropertyAddress"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="Circuit" type="tns:SubNetworkConnection"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="P2PCircuit" type="tns:TopologicalLink"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="Device" type="tns:PhysicalDevice"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="BusinessInteraction" type="tns:BusinessInteraction"/>
      <xs:element minOccurs="0" name="TerminationPoint" type="tns:TerminationPoint"/>
      <!--NumberObject Starts-->
      <xs:element minOccurs="0" name="NumberObject" type="tns:LogicalResource"/>
      <!--NumberObject Ends-->
      <!--LION MEF Begins-->
      <xs:element maxOccurs="unbounded" minOccurs="0" name="Service" type="tns:Service"/>
      <xs:element minOccurs="0" name="Flow" type="tns:Flow"/>
      <!--LION MEF Ends-->
      <xs:element maxOccurs="unbounded" minOccurs="0" name="Object" type="tns:Resource"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="Topology" type="tns:TopologicalLink"/>
    </xs:sequence>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.SecureHolder-->
  <xs:element name="SecureHolder" type="tns:SecureHolder"/>
  <xs:complexType name="SecureHolder">
    <xs:annotation>
      <xs:documentation>This class is a type of HolderComposite that serves as the parent for the Rack and Chassis classes. This class generalizes common properties that apply to Racks and Chassis.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:HolderComposite">
        <xs:sequence>
          <xs:element minOccurs="0" name="audibleAlarm" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This is a boolean attribute that, if TRUE, indicates that this SecureHolder is equipped with an audible alarm. This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="audibleAlarmDescription" type="xs:string">
            <xs:annotation>
              <xs:documentation>This is a free-form string that provides supplementary information for the AudibleAlarm attribute. It should only be filled in when the value of the AudibleAlarm attribute is TRUE. This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="lockPresent" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This is a boolean attribute that, if TRUE, indicates that this SecureHolder is protected by some type of lock. This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="securityBreach" type="xs:int">
            <xs:annotation>
              <xs:documentation>This is an enumerated 16-bit unsigned integer attribute indicating whether a breach of the Rack was attempted. Values include:

 0: Unknown
 1: Other
 2: No Breach
 3: Unsuccessful Breach (but attempted)
 4: Successful Breach

This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="securityBreachDescription" type="xs:string">
            <xs:annotation>
              <xs:documentation>This is a free-form string attribute that provides supplementary information for the SecurityBreach attribute. It should only be filled in when the value of SecurityBreach is 1 ("Other").

This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="visibleAlarm" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This is a boolean attribute that, if TRUE, indicates that the SecureHolder is equipped with one or more visible alarms (e.g., LEDs or gauges). This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="visibleAlarmDescription" type="xs:string">
            <xs:annotation>
              <xs:documentation>This is a free-form string attribute that provides supplementary information for the VisibleAlarm attribute. It should only be filled in when the value of VisibleAlarm is TRUE.

This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.Service-->
  <xs:element name="Service" type="tns:Service"/>
  <xs:complexType name="Service">
    <xs:annotation>
      <xs:documentation>This is an abstract base class for defining the Service hierarchy. All Services are characterized as either being possibly visible and usable by a Customer or not. This gives rise to the two subclasses of Service: CustomerFacingService and ResourceFacingService.

 

Services are defined as being tightly bound to Products. A Product defines the context of the Service, Service and its related entities (e.g., ServiceSpecification, ServiceRole, and so forth) are related to entities in the Resource, Product, and other domains through a set of relationships.

 

A Service represents the object that will be instantiated. Each Service instance can be different; therefore, Service is limited to owning just the changeable attributes, methods, relationships, and constraints that can be instantiated. The invariant attributes, methods, relationships, and constraints that can be instantiated are defined by a ServiceSpecification.

 

The purpose of this entity is twofold. First, it is used to define attributes, methods, and relationships that are common to all Services. Second, it provides a convenient point to define how Services interact with other parts business entities.

 

Service is a first-class entity, inheriting directly from ManagedEntity. It is therefore a sibling with Resource, Product, and other first-class entities. Note that the CIM models Service as a subclass of LogicalElement, which is a subclass of ManagedSystemElement, which is a subclass of ManagedElement (which is equivalent to ManagedEntity).</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:RootEntity">
        <xs:sequence>
          <xs:element minOccurs="0" name="isServiceEnabled" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This is a Boolean attribute that, if TRUE, signifies that this Service has been enabled for use. If the value of this attribute is FALSE, then this means that this particular Service has NOT been enabled for use.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="hasStarted" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This is a Boolean attribute that, if TRUE, signifies that this Service has already been started. If the value of this attribute is FALSE, then this signifies that this Service has NOT been Started.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="isMandatory" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This is a Boolean attribute that, if TRUE, signifies that this Service is mandatory (i.e., this Service must be running when the managed environment is in a non-failed state). If the value of this attribute is FALSE, then this means that this Service is not required to run.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="startMode" type="xs:int">
            <xs:annotation>
              <xs:documentation>This attribute is an enumerated integer that indicates how the Service is started. Values include:

 0: Unknown
 1: Automatically by the managed environment
 2: Automatically by the owning device
 3: Manually by the Provider of the Service
 4: Manually by a Customer of the Provider
 5: Any of the above</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="isStateful" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This is a Boolean attribute that, if TRUE, means that this Service can be changed without affecting any other services.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <!--Added for LION : Start Requirement AUC349873-->
          <xs:element minOccurs="0" name="aliasName" type="xs:string"/>
          <xs:element minOccurs="0" name="aliasName2" type="xs:string"/>
          <xs:element minOccurs="0" name="CreationDate" type="xs:string"/>
          <xs:element minOccurs="0" name="ModificationDate" type="xs:string"/>
          <xs:element minOccurs="0" name="functionalStatus" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="Remarks" type="tns:Remarks"/>
          <!--Added for LION : End Requirement AUC349873-->
          <xs:element minOccurs="0" name="serviceType" type="xs:string"/>
          <!--ServiceSubType added for LION-->
          <xs:element minOccurs="0" name="serviceSubType" type="xs:string"/>
          <xs:element minOccurs="0" name="action" type="xs:string"/>
          <xs:element minOccurs="0" name="_partyRole2" type="tns:PartyRole"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ServiceHostedOn" type="tns:PhysicalResourceRole"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="LocalPartyContact" type="tns:PartyRole"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ServiceRunBy" type="tns:LogicalResourceRole"/>
          <!--Service 'lrStatus' added for LION-->
          <xs:element minOccurs="0" name="lrStatus" type="xs:string"/>
          <!--<xs:element name="ZEndTps" type="tns:ConnectionTerminationPoint" minOccurs="0" maxOccurs="unbounded"/>-->
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ServiceDescribedBy" type="tns:ServiceCharacteristicValue"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ServiceRelationship" type="tns:ServiceRelationship"/>
          <xs:element minOccurs="0" name="OwnsServiceDetails" type="tns:OwnsServiceDetails"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: iclnbi.com.iclnbi.iclnbi.LogicalResourceRole-->
  <xs:element name="LogicalResourceRole" type="tns:LogicalResourceRole"/>
  <xs:complexType name="LogicalResourceRole">
    <xs:complexContent>
      <xs:extension base="tns:ResourceRole">
        <xs:sequence/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: iclnbi.com.iclnbi.iclnbi.ServiceRelationship-->
  <xs:element name="ServiceRelationship" type="tns:ServiceRelationship"/>
  <xs:complexType name="ServiceRelationship">
    <xs:sequence>
      <xs:element minOccurs="0" name="RelationshipType" type="xs:string"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="RelatedService" type="tns:Service"/>
    </xs:sequence>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.ServiceBundle-->
  <xs:element name="ServiceBundle" type="tns:ServiceBundle"/>
  <xs:complexType name="ServiceBundle">
    <xs:annotation>
      <xs:documentation>Conceptually, a ServiceBundle is thought of as a collection of ResourceFacingServiceSpecifications. This enables the needs of different sets of ResourceFacingServiceSpecifications to be grouped together  hence, the name "bundle". Since these are ResoureFacingSpecifications, they define reusable templates for implementing the ResourceFacingServices that are required by a particular CustomerFacingService (as represented by a ServicePackage).

 

ServiceBundles were designed to define a set of Class of Service specifications that were required by a CustomerFacingService to work together. A ServicePackage is the entity that models the requirements of the CustomerFacingService. Thus, ServicePackages can specify different packaging of CustomerFacingServices that are obtained by a Customer via a Product, and ServiceBundles specify the set of ResourceFacingServices that each CustomerFacingService requires.

 

ServiceBundles are a natural way to implement the requirements of a ServicePackage, and are related to a ServicePackage through the ServicePackageUsesServiceBundles aggregation.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:ResourceFacingServiceComposite">
        <xs:sequence>
          <xs:element minOccurs="0" name="hasMultipleQoSTypes" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This is a Boolean attribute that, if TRUE, defines this ServiceBundle as containing more than a single type of QoSService (e.g., DiffServ and 802.1P as an example).</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.Shelf-->
  <xs:element name="Shelf" type="tns:Shelf"/>
  <xs:complexType name="Shelf">
    <xs:annotation>
      <xs:documentation>A Shelf is a type of EquipmentHolder that is designed to hold various types of Equipment. It has a logical identifier that is often relative to the Bay that contains the Shelf (i.e., the unique identifier for a Shelf is often a concatenation of the network element identifier, the Bay identifier, and the Shelf identifier).

Note that the logical identifier of a Shelf is typically associated with the Device (i.e., the NetworkElement). Compare this to a Rack, whose logical identifier is NOT associated with the Device. This means that the Shelf IS explicitly a part of the logical model of a network.

Often, a Shelf is used to contain not just pluggable components (e.g., Cards, Power Supplies, etc.) but also cabling (e.g., both fiber and wire), with optional connections to external fuse, alarm, and other types of panels.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:HolderComposite">
        <xs:sequence>
          <xs:element minOccurs="0" name="relayRackID" type="xs:string"/>
          <xs:element minOccurs="0" name="bayName" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ConsistsOfSlot" type="tns:Slot"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="AllowableSlot" type="tns:Slot"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.Slot-->
  <xs:element name="Slot" type="tns:Slot"/>
  <xs:complexType name="Slot">
    <xs:annotation>
      <xs:documentation>This is a concrete class that has two main purposes. One is to model the ability of a hosting board to accept a daughter card to add or complete the base functionality of the hosting board. The second is to represent the different expansion slots supported by a Chassis.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:HolderAtomic">
        <xs:sequence>
          <xs:element minOccurs="0" name="hasAdapter" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This is a Boolean attribute that, if TRUE, indicates that this slot has an adapter installed that enables it to accept other types of cards (e.g., fitting an adapter on two Slots enable them to accept a Card that otherwise could not be accommodated). If its value is FALSE, then no adapter is present. This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="slotNumber" type="xs:int">
            <xs:annotation>
              <xs:documentation>This is a 16-bit unsigned integer attribute that represents an index into the system slot table. For example, this could be the hardware ID number (starting with 1) for each expansion slot. The number is independent of whether or not the Slot is occupied. This is a REQUIRED attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="slotPurpose" type="xs:int">
            <xs:annotation>
              <xs:documentation>This is an enumerated integer that defines the purpose of this Slot. A specific value below, such as System, means that the Slot is intended only to accept System cards. Values include:

 0: Unknown
 1: System
 2: Networking
 3: Port Adapter
 4: Memory
 5: Hardware Assist
 6: Video
 7: General Computing
 8: General Purpose

Hardware assist is a generic category for specialty boards that provide hardware functionality to assist in the processing of one or more functions. Examples are special cards for processing IPsec-based encryption.

General computing boards represent cards that have additional and/or auxiliary computing power that can be used for a variety of tasks (not just video rendering or encryption).

General purpose boards represent cards that have a variety of features (e.g., memory and computing).

This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="purposeDescription" type="xs:string">
            <xs:annotation>
              <xs:documentation>This is a free-form string that defines the physically unique characteristics of this Slot. This is an optional attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="SlotInSlot" type="tns:Slot"/>
          <xs:element minOccurs="0" name="HasCard" type="tns:Card"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="AllowableCard" type="tns:Card"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.StaticProtectionLevel-->
  <xs:simpleType name="StaticProtectionLevel">
    <xs:restriction base="xs:string">
      <xs:enumeration value="FULLY_PROTECTED"/>
      <xs:enumeration value="HIGHLY_PROTECTED"/>
      <xs:enumeration value="PARTIALLY_PROTECTED"/>
      <xs:enumeration value="PREEMTIBLE"/>
      <xs:enumeration value="UNPROTECTED"/>
    </xs:restriction>
  </xs:simpleType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.SubNetworkConnection-->
  <xs:element name="SubNetworkConnection" type="tns:SubNetworkConnection"/>
  <xs:complexType name="SubNetworkConnection">
    <xs:annotation>
      <xs:documentation>This object class represents the relationship between Termination Points. 
All end point TPs related by an Subnetwork Connection (SNC) must support the same or an equivalent layer rate which is also the SNC's layer rate. 
In pending state, generic Connection Termination Point(s) of the SNC could be replied. 
Refer to the associated supporting document SD1-36_SNCTypes for explanation of SNC Properties, SNC Parameters, unidirectional SNCs, Point-to-Multipoint SNC, Routing Constraints and Route Discovery. 
See R_TMF518_NRF_I_0024 and R_TMF518_NRF_I_0025. 
For bundled SNCs see R_TMF518_NRF_I_0032.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:LogicalResource">
        <xs:sequence>
          <xs:element minOccurs="0" name="state" type="tns:SubnetworkConnectionState">
            <xs:annotation>
              <xs:documentation>This attribute identifies the SNC connection state. 
See R_TMF518_NRF_I_0028.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="direction" type="tns:ConnectionDirection">
            <xs:annotation>
              <xs:documentation>This attribute identifies the directionality of the SNC.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="staticProtectionLevel" type="tns:StaticProtectionLevel">
            <xs:annotation>
              <xs:documentation>This attribute indicates the degree of internal resilience/protection of the SNC.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="type" type="tns:SubnetworkConnectionType">
            <xs:annotation>
              <xs:documentation>This attribute indicates the external traffic flow through the SNC. 
See R_TMF518_NRF_I_0029.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="rerouteAllowed" type="tns:RerouteAllowed">
            <xs:annotation>
              <xs:documentation>This attribute specifies if the target OS/MEs are allowed and/or required to reroute this SNC if there is a failure on this SNC, periodically to optimize the routes, of for any other reason. It is an target OS/ME implementation whether this is done using network routing protocols or if the target OS/MEs detect the failure and take appropriate action to attempt to fix the SNC. 
The NO value means that the target OS/MEs are not allowed to reroute the SNC. 
The YES value means that the target OS/MEs are allowed to reroute the SNC and are required to attempt to reroute it upon failure. 
The NA value is used when the requesting OS does not want to specify the exact target OS behaviour. In this case it is left up to the target OS to decide whether rerouting will be provided. It is also used if the target OS/MEs are allowed to reroute the SNC but not required to attempt to reroute it upon failure.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="networkRouted" type="tns:NetworkRouted">
            <xs:annotation>
              <xs:documentation>This attribute specifies if the route for this SNC is computed by the network. 
If rerouting is allowed, this attribute tells who last rerouted the SNC, the network (YES) or the EMS (NO).</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="networkReroute" type="tns:Reroute">
            <xs:annotation>
              <xs:documentation>This attribute indicates if the reroute (if allowed) should be computed by the network (YES), by the EMS (NO), or if it does not matter (NOT_SET). 
Changes in the value of this attribute lead to an AVC notification.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="revertive" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This attribute defines if the SNC can be switched back to its original (intended) route. 
In case the SNC is "revertive" (True), the restoration process will always switch to the intended route if possible, i.e. if there are no failures or if the intended route is not locked. 
Changes in the value of this attribute lead to an AVC notification.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="isReportingAlarms" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This attribute identifies whether alarm reporting for this subnetwork connection is administratively activated or de-activated. 
Changes in the value of this attribute lead to an AVC notification. 
 
True = alarm reporting is activated; False = alarm reporting is de-activated.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="correlationIdentifier" type="xs:string">
            <xs:annotation>
              <xs:documentation>This attribute contains information about relationships that this subnetwork connection may have to other objects. 
Changes in the value of this attribute lead to an AVC notification.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="isBundledSnc" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This attribute indicates if the SNC is a bundled SNC.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="mustRemoveGtps" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This attribute defines that the target OS has to delete all the interior GTPs supporting the bundled SNC when the SNC is deleted. It is only used for bundled SNCs. 
 
It can take on two possible values: 
- TRUE (the target OS must make a best-effort attempt to remove the interior GTPs that once belonged to the SNC) and 
- FALSE (the requesting OS doesn't care if the target OS removes the interior GTPs or not). 
 
In the case that mustRemoveGTPs is set to "TRUE" and the target OS cannot remove all the interior GTPs, the target OS should return a list of the GTPs that could not be removed in the errorReason field of the deactivateAndDeleteSNC and deleteSNC operations. The errorReason will be "not all interior GTPs could be deleted" - this will be followed by the names of the GTPs that could not be deleted.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="isFixed" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This attribute identifies if the SubnetworkConnection is fixed (i.e. cannot be deleted by the requestig OS). 
A fixed SNC is defined a SNC whose all cross connects are fixed.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="mustRetainOldSnc" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This attribute identifies if an original route of the SNC is maintained and that it is possible to swap back this route. 
Changes in the value of this attribute lead to an AVC notification.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="priority" type="xs:int">
            <xs:annotation>
              <xs:documentation>This attribute identifies the priority of the SNC. 
Allowed values are = "0" , "1" , "2" , ... where zero (0) is the highest priority. 
Changes in the value of this attribute lead to an AVC notification.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="routeGroupLabel" type="xs:string">
            <xs:annotation>
              <xs:documentation>This attribute represents the Route Group the Subnetwork Connection is associated to. When a target OS creates a Call with diverse Route Groups, it assigns a Route Group label (which may be a number) to each SNC. SNCs in the same Route Group will be assigned the same value for routeGroupLabel. SNCs in different Route Groups will be assigned different values for routeGroupLabel.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="bandwidth" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="Route" type="tns:Route"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="SncHasAEndTps" type="tns:TerminationPoint"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="SncHasZEndTps" type="tns:TerminationPoint"/>
          <!--Added AddressDetails under SubNetworkConnection class to associate Service address to a Service in the similar way we do it for UNI Circuit today to standardise this relationship across Services-->
          <xs:element maxOccurs="2" minOccurs="0" name="AddressDetails" type="tns:AmericanPropertyAddress"/>
          <xs:element minOccurs="0" name="TransportTypes" type="tns:TransportType"/>
          <xs:element minOccurs="0" name="TransmissionType" type="tns:TransmissionType"/>
          <xs:element minOccurs="0" name="apsProtocolType" type="xs:string"/>
          <!--Added as part of the CR5435-ICL-Get Circuit Response-OFFNET INDICATOR-->
          <xs:element minOccurs="0" name="specificationCode" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="BroadBand" type="tns:BroadBand"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.SubnetworkConnectionState-->
  <xs:simpleType name="SubnetworkConnectionState">
    <xs:restriction base="xs:string">
      <xs:enumeration value="ACTIVE"/>
      <xs:enumeration value="PARTIAL"/>
      <xs:enumeration value="PENDING"/>
    </xs:restriction>
  </xs:simpleType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.SubnetworkConnectionType-->
  <xs:simpleType name="SubnetworkConnectionType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="ADD_DROP_A"/>
      <xs:enumeration value="ADD_DROP_Z"/>
      <xs:enumeration value="DOUBLE_ADD_DROP"/>
      <xs:enumeration value="DOUBLE_INTERCONNECT"/>
      <xs:enumeration value="EXPLICIT"/>
      <xs:enumeration value="INTERCONNECT"/>
      <xs:enumeration value="OPEN_ADD_DROP"/>
      <xs:enumeration value="SIMPLE"/>
    </xs:restriction>
  </xs:simpleType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.TerminationMode-->
  <xs:simpleType name="TerminationMode">
    <xs:restriction base="xs:string">
      <xs:enumeration value="NEITHER_TERMINATED_NOR_AVAILABLE_FOR_MAPPING"/>
      <xs:enumeration value="NOT_APPLICABLE"/>
      <xs:enumeration value="TERMINATED_AND_AVAILABLE_FOR_MAPPING"/>
    </xs:restriction>
  </xs:simpleType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.TerminationPoint-->
  <xs:element name="TerminationPoint" type="tns:TerminationPoint"/>
  <xs:complexType name="TerminationPoint">
    <xs:annotation>
      <xs:documentation>This object class is the superclass of the CTP (ConnectionTerminationPoint) and PTP (PhysicalTerminationPoint) object classes. 
TP encapsulates object characteristics common to both CTPs and PTPs (i.e., common to end points (actual or potential) of Subnetwork Connections, Topological Links and Flow Domain Fragments). 
The layer rate of the TP is expressed in terms of the Transmission Parameters list attribute. 
See R_TMF518_NRF_I_0005 and R_TMF518_NRF_I_0006. 
For Connectionless Port Termination Points (CPTP) in connectionless network see R_TMF518_NRF_I_0016.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:ManagedTransmissionEntity">
        <xs:sequence>
          <xs:element minOccurs="0" name="direction" type="tns:Directionality">
            <xs:annotation>
              <xs:documentation>This attribute represents a static, inherent capability of the TP.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="tpProtectionAssociation" type="tns:TerminationPointProtectionAssociation">
            <xs:annotation>
              <xs:documentation>This attribute indicates whether the TP has an associated protection TP and, if so, what kind of protection association exists.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="isEdgePoint" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This attribute indicates if the TP is an edge point of at least one Subnetwork or Flow Domain, i.e. if it is an end point of a potential inter-Subnetwork/inter-FlowDomain Topological Link. 
See R_TMF518_NRF_I_0008.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="isEquipmentProtected" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This attribute indicates whether or not the TP is supported by a protected Equipment.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="egressTmdState" type="tns:TransmissionDescriptorState">
            <xs:annotation>
              <xs:documentation>This attribute contains the state of consistency between a TP and its associated egress TransmissionDescriptor.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="ingressTmdState" type="tns:TransmissionDescriptorState">
            <xs:annotation>
              <xs:documentation>This attribute contains the state of consistency between a TP and its associated ingress TransmissionDescriptor.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="AssociatedWith" type="tns:TerminationPoint"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="AccessPointAddress" type="tns:AmericanPropertyAddress"/>
          <xs:element minOccurs="0" name="vendorTPName" type="xs:string"/>
          <xs:element minOccurs="0" name="typeOfTP" type="xs:int"/>
          <xs:element minOccurs="0" name="endPointLabel" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ingressQoSBandwidth" type="tns:CoSBundle"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="egressQoSBandwidth" type="tns:CoSBundle"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.TerminationPointConnectionState-->
  <xs:simpleType name="TerminationPointConnectionState">
    <xs:restriction base="xs:string">
      <xs:enumeration value="BIDIRECTIONAL_CONNECTED"/>
      <xs:enumeration value="NOT_APPLICABLE"/>
      <xs:enumeration value="NOT_CONNECTED"/>
      <xs:enumeration value="SINK_CONNECTED"/>
      <xs:enumeration value="SOURCE_CONNECTED"/>
    </xs:restriction>
  </xs:simpleType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.TerminationPointProtectionAssociation-->
  <xs:simpleType name="TerminationPointProtectionAssociation">
    <xs:restriction base="xs:string">
      <xs:enumeration value="NOT_APPLICABLE"/>
      <xs:enumeration value="PSR_RELATED"/>
    </xs:restriction>
  </xs:simpleType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.TopologicalLink-->
  <xs:element name="TopologicalLink" type="tns:TopologicalLink"/>
  <xs:complexType name="TopologicalLink">
    <xs:annotation>
      <xs:documentation>This object class represents a physical link between two or more (usual case two; more than two e.g., for representing RPR transport connectivity) PTPs or a trail between two TPs. 
A Topological Link (TL) may traverse through DWDM equipment and optical transport networks managed by another target OS. The TL reported by the first target OS in that case could correspond to a (regenerator) section under its management domain. It is up to the requesting OS user to put together the exact topology of the network in such cases, based on the reported Managed Elements and TLs. 
For unidirectional TLs the aEndTP marks the traffic source whereas the zEndTP marks the traffic sink. 
See R_TMF518_NRF_I_0019 and R_TMF518_NRF_I_0020.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:LogicalResource">
        <xs:sequence>
          <xs:element minOccurs="0" name="direction" type="tns:ConnectionDirection">
            <xs:annotation>
              <xs:documentation>This attribute identifies the direction of the Topological Link.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="revertive" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>ICL -- when ICL receives a Disconnect UNI request with the REVERT Flag = TRUE, ICL will set the provisioning status to PLANNED rather than Disconnected.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="isReportingAlarms" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This attribute provides an indication of whether alarm reporting for this Topological Link is administratively activated or de-activated. 
True = alarm reporting is activated; False = alarm reporting is de-activated.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="bandwidth" type="xs:string"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="ZEndTps" type="tns:ConnectionTerminationPoint"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="AEndTps" type="tns:ConnectionTerminationPoint"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="TlIsTerminatedByAEndTps" type="tns:TerminationPoint"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="TlIsTerminatedByZEndTps" type="tns:TerminationPoint"/>
          <!--Rashmi Start-->
          <xs:element minOccurs="0" name="TransportTypes" type="tns:TransportType"/>
          <xs:element minOccurs="0" name="TransmissionType" type="tns:TransmissionType"/>
          <!--Rashmi End-->
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.TransmissionDescriptorState-->
  <xs:simpleType name="TransmissionDescriptorState">
    <xs:restriction base="xs:string">
      <xs:enumeration value="APPLIED"/>
      <xs:enumeration value="MISMATCH"/>
      <xs:enumeration value="NOT_APPLICABLE"/>
      <xs:enumeration value="PENDING"/>
      <xs:enumeration value="TMD_MISSING"/>
    </xs:restriction>
  </xs:simpleType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.UNICircuit-->
  <xs:element name="UNICircuit" type="tns:UNICircuit"/>
  <xs:complexType name="UNICircuit">
    <xs:complexContent>
      <xs:extension base="tns:TopologicalLink">
        <xs:sequence>
          <xs:element minOccurs="0" name="NCCode" type="xs:string"/>
          <xs:element minOccurs="0" name="NCICode" type="xs:string"/>
          <xs:element minOccurs="0" name="SecoundaryNCICode" type="xs:string"/>
          <xs:element minOccurs="0" name="EVCBandwidth" type="xs:string"/>
          <xs:element minOccurs="0" name="rateLimitType" type="xs:string"/>
          <xs:element minOccurs="0" name="logicalPortTypeAllowed" type="xs:string"/>
          <xs:element minOccurs="0" name="bandwidthProfile" type="xs:string"/>
          <xs:element minOccurs="0" name="bandwidthProfileType" type="xs:string"/>
          <xs:element minOccurs="0" name="serviceMux" type="xs:string"/>
          <xs:element minOccurs="0" name="bundling" type="xs:string"/>
          <xs:element minOccurs="0" name="allToOneBundling" type="xs:string"/>
          <xs:element minOccurs="0" name="allowableInterfaceType" type="xs:string"/>
          <xs:element minOccurs="0" name="allowablePortType" type="xs:string"/>
          <xs:element minOccurs="0" name="TSP" type="xs:string"/>
          <!--This is added to support the Protection Protocol for the ENNI Service as part of CR4594-AUC393816-->
          <xs:element minOccurs="0" name="apsProtocolType" type="xs:string"/>
          <xs:element minOccurs="0" name="specificationCode" type="xs:string">
            <xs:annotation>
              <xs:documentation>This code is used by Workflow as input to Rules Engine for validating UNI membership of an EVC (Legacy Q)
Examples:
TLS, Non-TLS, SP, SM</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="QoSBandwidth" type="tns:CoSBundle"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="HasCustomer" type="tns:Customer"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="AddressDetails" type="tns:AmericanPropertyAddress"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="EVCCircuit" type="tns:EVCCircuit"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="DiversityCircuit" type="tns:TopologicalLink"/>
          <xs:element minOccurs="0" name="Route" type="tns:Route"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.UpdateCircuitRequest-->
  <xs:element name="UpdateCircuitRequest" type="tns:UpdateCircuitRequest"/>
  <xs:complexType name="UpdateCircuitRequest">
    <xs:complexContent>
      <xs:extension base="tns:OperationRequest">
        <xs:sequence>
          <xs:element minOccurs="0" name="Circuit" type="tns:SubNetworkConnection"/>
          <xs:element minOccurs="0" name="P2PCircuit" type="tns:TopologicalLink"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.UpdateCircuitResponse-->
  <xs:element name="UpdateCircuitResponse" type="tns:UpdateCircuitResponse"/>
  <xs:complexType name="UpdateCircuitResponse">
    <xs:complexContent>
      <xs:extension base="tns:OperationResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="Circuit" type="tns:SubNetworkConnection"/>
          <xs:element minOccurs="0" name="P2PCircuit" type="tns:TopologicalLink"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.DeleteCircuitRequest-->
  <xs:element name="DeleteCircuitRequest" type="tns:DeleteCircuitRequest"/>
  <xs:complexType name="DeleteCircuitRequest">
    <xs:complexContent>
      <xs:extension base="tns:OperationRequest">
        <xs:sequence>
          <xs:element minOccurs="0" name="Circuit" type="tns:SubNetworkConnection"/>
          <xs:element minOccurs="0" name="P2PCircuit" type="tns:TopologicalLink"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.DeleteCircuitResponse-->
  <xs:element name="DeleteCircuitResponse" type="tns:DeleteCircuitResponse"/>
  <xs:complexType name="DeleteCircuitResponse">
    <xs:complexContent>
      <xs:extension base="tns:OperationResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="Circuit" type="tns:SubNetworkConnection"/>
          <xs:element minOccurs="0" name="P2PCircuit" type="tns:TopologicalLink"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.UpdateDeviceRequest-->
  <xs:element name="UpdateDeviceRequest" type="tns:UpdateDeviceRequest"/>
  <xs:complexType name="UpdateDeviceRequest">
    <xs:complexContent>
      <xs:extension base="tns:OperationRequest">
        <xs:sequence>
          <xs:element minOccurs="0" name="Device" type="tns:PhysicalDevice"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.UpdateDeviceResponse-->
  <xs:element name="UpdateDeviceResponse" type="tns:UpdateDeviceResponse"/>
  <xs:complexType name="UpdateDeviceResponse">
    <xs:complexContent>
      <xs:extension base="tns:OperationResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="Device" type="tns:PhysicalDevice"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.DeleteDeviceRequest-->
  <xs:element name="DeleteDeviceRequest" type="tns:DeleteDeviceRequest"/>
  <xs:complexType name="DeleteDeviceRequest">
    <xs:complexContent>
      <xs:extension base="tns:OperationRequest">
        <xs:sequence>
          <xs:element minOccurs="0" name="Device" type="tns:PhysicalDevice"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.DeleteDeviceResponse-->
  <xs:element name="DeleteDeviceResponse" type="tns:DeleteDeviceResponse"/>
  <xs:complexType name="DeleteDeviceResponse">
    <xs:complexContent>
      <xs:extension base="tns:OperationResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="Device" type="tns:PhysicalDevice"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.UpdateLocationRequest-->
  <xs:element name="UpdateLocationRequest" type="tns:UpdateLocationRequest"/>
  <xs:complexType name="UpdateLocationRequest">
    <xs:complexContent>
      <xs:extension base="tns:OperationRequest">
        <xs:sequence>
          <xs:element minOccurs="0" name="AddressDetails" type="tns:AmericanPropertyAddress"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.UpdateLocationResponse-->
  <xs:element name="UpdateLocationResponse" type="tns:UpdateLocationResponse"/>
  <xs:complexType name="UpdateLocationResponse">
    <xs:complexContent>
      <xs:extension base="tns:OperationResponse">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="AddressDetails" type="tns:AmericanPropertyAddress"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.DeleteLocationRequest-->
  <xs:element name="DeleteLocationRequest" type="tns:DeleteLocationRequest"/>
  <xs:complexType name="DeleteLocationRequest">
    <xs:complexContent>
      <xs:extension base="tns:OperationRequest">
        <xs:sequence>
          <xs:element minOccurs="0" name="AddressDetails" type="tns:AmericanPropertyAddress"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.DeleteLocationResponse-->
  <xs:element name="DeleteLocationResponse" type="tns:DeleteLocationResponse"/>
  <xs:complexType name="DeleteLocationResponse">
    <xs:complexContent>
      <xs:extension base="tns:OperationResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="AddressDetails" type="tns:AmericanPropertyAddress"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.UpdatePartyRequest-->
  <xs:element name="UpdatePartyRequest" type="tns:UpdatePartyRequest"/>
  <xs:complexType name="UpdatePartyRequest">
    <xs:complexContent>
      <xs:extension base="tns:OperationRequest">
        <xs:sequence>
          <xs:element minOccurs="0" name="PartyDetails" type="tns:Party"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.UpdatePartyResponse-->
  <xs:element name="UpdatePartyResponse" type="tns:UpdatePartyResponse"/>
  <xs:complexType name="UpdatePartyResponse">
    <xs:complexContent>
      <xs:extension base="tns:OperationResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="PartyDetails" type="tns:Party"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.DeletePartyRequest-->
  <xs:element name="DeletePartyRequest" type="tns:DeletePartyRequest"/>
  <xs:complexType name="DeletePartyRequest">
    <xs:complexContent>
      <xs:extension base="tns:OperationRequest">
        <xs:sequence>
          <xs:element minOccurs="0" name="PartyDetails" type="tns:Party"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.DeletePartyResponse-->
  <xs:element name="DeletePartyResponse" type="tns:DeletePartyResponse"/>
  <xs:complexType name="DeletePartyResponse">
    <xs:complexContent>
      <xs:extension base="tns:OperationResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="PartyDetails" type="tns:Party"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--Added below as part of AUC260567 Update Membership-->
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.CreateTerminationPointRequest-->
  <xs:element name="CreateTerminationPointRequest" type="tns:CreateTerminationPointRequest"/>
  <xs:complexType name="CreateTerminationPointRequest">
    <xs:complexContent>
      <xs:extension base="tns:OperationRequest">
        <xs:sequence>
          <xs:element minOccurs="0" name="TerminationPoint" type="tns:TerminationPoint"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--Added below as part of AUC260567 Update Membership-->
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.CreateTerminationPointResponse-->
  <xs:element name="CreateTerminationPointResponse" type="tns:CreateTerminationPointResponse"/>
  <xs:complexType name="CreateTerminationPointResponse">
    <xs:complexContent>
      <xs:extension base="tns:OperationResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="TerminationPoint" type="tns:TerminationPoint"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--Added below as part of AUC260567 Update Membership-->
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.UpdateTerminationPointRequest-->
  <xs:element name="UpdateTerminationPointRequest" type="tns:UpdateTerminationPointRequest"/>
  <xs:complexType name="UpdateTerminationPointRequest">
    <xs:complexContent>
      <xs:extension base="tns:OperationRequest">
        <xs:sequence>
          <xs:element minOccurs="0" name="TerminationPoint" type="tns:TerminationPoint"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--Added below as part of AUC260567 Update Membership-->
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.UpdateTerminationPointResponse-->
  <xs:element name="UpdateTerminationPointResponse" type="tns:UpdateTerminationPointResponse"/>
  <xs:complexType name="UpdateTerminationPointResponse">
    <xs:complexContent>
      <xs:extension base="tns:OperationResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="TerminationPoint" type="tns:TerminationPoint"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--Added below as part of AUC260567 Update Membership-->
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.DeleteTerminationPointRequest-->
  <xs:element name="DeleteTerminationPointRequest" type="tns:DeleteTerminationPointRequest"/>
  <xs:complexType name="DeleteTerminationPointRequest">
    <xs:complexContent>
      <xs:extension base="tns:OperationRequest">
        <xs:sequence>
          <xs:element minOccurs="0" name="TerminationPoint" type="tns:TerminationPoint"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--Added below as part of AUC260567 Update Membership-->
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.DeleteTerminationPointResponse-->
  <xs:element name="DeleteTerminationPointResponse" type="tns:DeleteTerminationPointResponse"/>
  <xs:complexType name="DeleteTerminationPointResponse">
    <xs:complexContent>
      <xs:extension base="tns:OperationResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="TerminationPoint" type="tns:TerminationPoint"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.UrbanPropertyAddress-->
  <xs:element name="UrbanPropertyAddress" type="tns:UrbanPropertyAddress"/>
  <xs:complexType name="UrbanPropertyAddress">
    <xs:annotation>
      <xs:documentation>An UrbanPropertyAddress is a structured textual way of describing how to find a Property in an urban area (country properties are often defined differently). It is usually composed of an ordered list of Location names based on context specific rulesThis is an example of a concrete Geographic Location entity.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="tns:GeographicAddress">
        <xs:sequence>
          <xs:element minOccurs="0" name="primaryAddressLocationIndicator" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Identifies that the  address location information being
provided is a primary location.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="newConstructionIndicator" type="xs:boolean"/>
          <xs:element minOccurs="0" name="addressFormatType" type="xs:string">
            <xs:annotation>
              <xs:documentation>Identifies the format of the address being supplied.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="streetNrFirst" type="xs:string">
            <xs:annotation>
              <xs:documentation>number identifying a specific property on a public street. It may be combined with streetNrLast for ranged addresses</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="streetNrFirstSuffix" type="xs:string">
            <xs:annotation>
              <xs:documentation>the first street number suffix</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="streetNrLast" type="xs:string">
            <xs:annotation>
              <xs:documentation>the last number in a range of street numbers allocated to a property</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="streetNrLastSuffix" type="xs:string">
            <xs:annotation>
              <xs:documentation>the last street number suffix for a ranged address</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="streetName" type="xs:string">
            <xs:annotation>
              <xs:documentation>the name of the street or other street type</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="streetType" type="xs:string">
            <xs:annotation>
              <xs:documentation>alley, avenue, boulevard, brae, crescent, drive, highway, lane, terrace, parade, place, tarn, way, wharf ?</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="streetSuffix" type="xs:string">
            <xs:annotation>
              <xs:documentation>A modifier denoting a relative direction</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="locality" type="xs:string">
            <xs:annotation>
              <xs:documentation>"An area of defined or undefined boundaries within a local authority or other legislatively defined area, usually rural or semi rural in nature." [ANZLIC-STREET], or a suburb "a bounded locality within a city, town or shire principally of urban character " [ANZLIC-STREET]</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="postcode" type="xs:string">
            <xs:annotation>
              <xs:documentation>A descriptor for a postal delivery area, used to speed and simplify the delivery of mail.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="postcodeExt" type="xs:string"/>
          <xs:element minOccurs="0" name="floor" type="xs:string"/>
          <xs:element minOccurs="0" name="room" type="xs:string"/>
          <!--Added Longitude and Latitude as part of CLC mapping requirement AUC237530-->
          <xs:element minOccurs="0" name="longitude" type="xs:string"/>
          <xs:element minOccurs="0" name="latitude" type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--*****Added below operations as part of AUC341716 NumberObject Mangement *****-->
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.ConsumeNumberObjectRequest-->
  <xs:element name="ConsumeNumberObjectRequest" type="tns:ConsumeNumberObjectRequest"/>
  <xs:complexType name="ConsumeNumberObjectRequest">
    <xs:complexContent>
      <xs:extension base="tns:OperationRequest">
        <xs:sequence>
          <xs:element minOccurs="0" name="NumberObject" type="tns:LogicalResource"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.ConsumeNumberObjectResponse-->
  <xs:element name="ConsumeNumberObjectResponse" type="tns:ConsumeNumberObjectResponse"/>
  <xs:complexType name="ConsumeNumberObjectResponse">
    <xs:complexContent>
      <xs:extension base="tns:OperationResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="NumberObject" type="tns:LogicalResource"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.ReleaseNumberObjectRequest-->
  <xs:element name="ReleaseNumberObjectRequest" type="tns:ReleaseNumberObjectRequest"/>
  <xs:complexType name="ReleaseNumberObjectRequest">
    <xs:complexContent>
      <xs:extension base="tns:OperationRequest">
        <xs:sequence>
          <xs:element minOccurs="0" name="NumberObject" type="tns:LogicalResource"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.ReleaseNumberObjectResponse-->
  <xs:element name="ReleaseNumberObjectResponse" type="tns:ReleaseNumberObjectResponse"/>
  <xs:complexType name="ReleaseNumberObjectResponse">
    <xs:complexContent>
      <xs:extension base="tns:OperationResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="NumberObject" type="tns:LogicalResource"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.CreateCugRequest-->
  <xs:element name="CreateCugRequest" type="tns:CreateCugRequest"/>
  <xs:complexType name="CreateCugRequest">
    <xs:complexContent>
      <xs:extension base="tns:OperationRequest">
        <xs:sequence>
          <xs:element minOccurs="0" name="CugObject" type="tns:LogicalResource"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.CreateCugResponse-->
  <xs:element name="CreateCugResponse" type="tns:CreateCugResponse"/>
  <xs:complexType name="CreateCugResponse">
    <xs:complexContent>
      <xs:extension base="tns:OperationResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="CugObject" type="tns:LogicalResource"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.GenerateMCORequest-->
  <xs:element name="GenerateMCORequest" type="tns:GenerateMCORequest"/>
  <xs:complexType name="GenerateMCORequest">
    <xs:complexContent>
      <xs:extension base="tns:OperationRequest">
        <xs:sequence>
          <xs:element minOccurs="0" name="MCOObject" type="tns:LogicalResource"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.GenerateMCOResponse-->
  <xs:element name="GenerateMCOResponse" type="tns:GenerateMCOResponse"/>
  <xs:complexType name="GenerateMCOResponse">
    <xs:complexContent>
      <xs:extension base="tns:OperationResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="MCOObject" type="tns:LogicalResource"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.CreateTopologyRequest-->
  <xs:element name="CreateTopologyRequest" type="tns:CreateTopologyRequest"/>
  <xs:complexType name="CreateTopologyRequest">
    <xs:complexContent>
      <xs:extension base="tns:OperationRequest">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="Topology" type="tns:TopologicalLink"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.CreateTopologyResponse-->
  <xs:element name="CreateTopologyResponse" type="tns:CreateTopologyResponse"/>
  <xs:complexType name="CreateTopologyResponse">
    <xs:complexContent>
      <xs:extension base="tns:OperationResponse">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="Topology" type="tns:TopologicalLink"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.DeleteTopologyRequest-->
  <xs:element name="DeleteTopologyRequest" type="tns:DeleteTopologyRequest"/>
  <xs:complexType name="DeleteTopologyRequest">
    <xs:complexContent>
      <xs:extension base="tns:OperationRequest">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="Topology" type="tns:TopologicalLink"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.DeleteTopologyResponse-->
  <xs:element name="DeleteTopologyResponse" type="tns:DeleteTopologyResponse"/>
  <xs:complexType name="DeleteTopologyResponse">
    <xs:complexContent>
      <xs:extension base="tns:OperationResponse">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="Topology" type="tns:TopologicalLink"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.UpdateTopologyRequest-->
  <xs:element name="UpdateTopologyRequest" type="tns:UpdateTopologyRequest"/>
  <xs:complexType name="UpdateTopologyRequest">
    <xs:complexContent>
      <xs:extension base="tns:OperationRequest">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="Topology" type="tns:TopologicalLink"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.UpdateTopologyResponse-->
  <xs:element name="UpdateTopologyResponse" type="tns:UpdateTopologyResponse"/>
  <xs:complexType name="UpdateTopologyResponse">
    <xs:complexContent>
      <xs:extension base="tns:OperationResponse">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="Topology" type="tns:TopologicalLink"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.IdentifyPortRequest-->
  <xs:element name="IdentifyPortRequest" type="tns:IdentifyPortRequest"/>
  <xs:complexType name="IdentifyPortRequest">
    <xs:complexContent>
      <xs:extension base="tns:OperationRequest">
        <xs:sequence>
          <xs:element minOccurs="0" name="PortRequestDetails" type="tns:PortRequestDetails"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.IdentifyPortResponse-->
  <xs:element name="IdentifyPortResponse" type="tns:IdentifyPortResponse"/>
  <xs:complexType name="IdentifyPortResponse">
    <xs:complexContent>
      <xs:extension base="tns:OperationResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="PortResponseDetails" type="tns:PortResponseDetails"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="PortRequestDetails" type="tns:PortRequestDetails"/>
  <xs:complexType name="PortRequestDetails">
    <xs:complexContent>
      <xs:extension base="tns:PhysicalPort">
        <xs:sequence>
          <xs:element minOccurs="0" name="entity" type="xs:string"/>
          <xs:element minOccurs="0" name="level" type="xs:string"/>
          <xs:element minOccurs="0" name="scope" type="xs:string"/>
          <xs:element minOccurs="0" name="NCCode" type="xs:string"/>
          <xs:element minOccurs="0" name="NCICode" type="xs:string"/>
          <xs:element minOccurs="0" name="BandwidthProfileType" type="xs:string"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="PortResponseDetails" type="tns:PortResponseDetails"/>
  <xs:complexType name="PortResponseDetails">
    <xs:complexContent>
      <xs:extension base="tns:PhysicalPort"></xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.ValidationResourceRequest-->
  <xs:element name="ValidationResourceRequest" type="tns:ValidationResourceRequest"/>
  <xs:complexType name="ValidationResourceRequest">
    <xs:complexContent>
      <xs:extension base="tns:OperationRequest">
        <xs:sequence>
          <xs:element minOccurs="0" name="ValidationResourceDetails" type="tns:ValidationResourceDetails"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.ValidationResourceDetails-->
  <xs:element name="ValidationResourceDetails" type="tns:ValidationResourceDetails"/>
  <xs:complexType name="ValidationResourceDetails">
    <xs:complexContent>
      <xs:extension base="tns:SearchResourceDetails"></xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.ValidationResourceResponse-->
  <xs:element name="ValidationResourceResponse" type="tns:ValidationResourceResponse"/>
  <xs:complexType name="ValidationResourceResponse">
    <xs:complexContent>
      <xs:extension base="tns:OperationResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="ValidationResponseDetails" type="tns:ValidationResponseDetails"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.ValidationResponseDetails-->
  <xs:element name="ValidationResponseDetails" type="tns:ValidationResponseDetails"/>
  <xs:complexType name="ValidationResponseDetails">
    <xs:complexContent>
      <xs:extension base="tns:SearchResponseDetails"></xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.CreateSTagRequest-->
  <xs:element name="CreateSTagRequest" type="tns:CreateSTagRequest"/>
  <xs:complexType name="CreateSTagRequest">
    <xs:complexContent>
      <xs:extension base="tns:OperationRequest">
        <xs:sequence>
          <xs:element minOccurs="0" name="Circuit" type="tns:EVCCircuit"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!--The type: ICL2.ICL2.com.x0.icl2.icl20.CreateSTagRequest-->
  <xs:element name="CreateSTagResponse" type="tns:CreateSTagResponse"/>
  <xs:complexType name="CreateSTagResponse">
    <xs:complexContent>
      <xs:extension base="tns:OperationResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="Circuit" type="tns:EVCCircuit"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="BroadBand" type="tns:BroadBand"/>
  <xs:complexType name="BroadBand">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="ResourceDescribedBy" type="tns:ResourceCharacteristicValue"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://iclsmxtest.test.intranet:10001/icl/services/ICL_2_0</con:endpoint></con:endpoints><con:operation isOneWay="false" action="http://www.ICLNBIDataService.com/ConsumeNumberObject" name="ConsumeNumberObject" bindingOperationName="ConsumeNumberObject" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://iclsmxtest.test.intranet:10001/icl/services/ICL_2_0</con:endpoint><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.ICLNBIDataService.com/ConsumeNumberObject"/></con:call></con:operation><con:operation isOneWay="false" action="http://www.ICLNBIDataService.com/CreateCircuit" name="CreateCircuit" bindingOperationName="CreateCircuit" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="http://www.ICLNBIDataService.com/CreateCug" name="CreateCug" bindingOperationName="CreateCug" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="http://www.ICLNBIDataService.com/CreateDevice" name="CreateDevice" bindingOperationName="CreateDevice" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="http://www.ICLNBIDataService.com/CreateFlowDomain" name="CreateFlowDomain" bindingOperationName="CreateFlowDomain" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="http://www.ICLNBIDataService.com/CreateLocation" name="CreateLocation" bindingOperationName="CreateLocation" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="http://www.ICLNBIDataService.com/CreateObjectImage" name="CreateObjectImage" bindingOperationName="CreateObjectImage" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="http://www.ICLNBIDataService.com/CreateLocation" name="CreateParty" bindingOperationName="CreateParty" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="http://www.ICLNBIDataService.com/CreateService" name="CreateService" bindingOperationName="CreateService" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="http://www.ICLNBIDataService.com/CreateSTag" name="CreateSTag" bindingOperationName="CreateSTag" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="http://www.ICLNBIDataService.com/CreateTopology" name="CreateTopology" bindingOperationName="CreateTopology" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="http://www.ICLNBIDataService.com/UpdateCircuit" name="DeleteCircuit" bindingOperationName="DeleteCircuit" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="http://www.ICLNBIDataService.com/UpdateDevice" name="DeleteDevice" bindingOperationName="DeleteDevice" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="http://www.ICLNBIDataService.com/UpdateLocation" name="DeleteLocation" bindingOperationName="DeleteLocation" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="http://www.ICLNBIDataService.com/DeleteObjectImage" name="DeleteObjectImage" bindingOperationName="DeleteObjectImage" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="http://www.ICLNBIDataService.com/UpdateLocation" name="DeleteParty" bindingOperationName="DeleteParty" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="http://www.ICLNBIDataService.com/DeleteService" name="DeleteService" bindingOperationName="DeleteService" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="http://www.ICLNBIDataService.com/DeleteTopology" name="DeleteTopology" bindingOperationName="DeleteTopology" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="http://www.ICLNBIDataService.com/GenerateMCO" name="GenerateMCO" bindingOperationName="GenerateMCO" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="http://www.ICLNBIDataService.com/IdentifyPort" name="IdentifyPort" bindingOperationName="IdentifyPort" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="http://www.ICLNBIDataService.com/ReleaseNumberObject" name="ReleaseNumberObject" bindingOperationName="ReleaseNumberObject" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="http://www.ICLNBIDataService.com/RestoreObjectImage" name="RestoreObjectImage" bindingOperationName="RestoreObjectImage" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="http://www.ICLNBIDataService.com/SearchResource" name="SearchResource" bindingOperationName="SearchResource" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="http://www.ICLNBIDataService.com/SearchResourceSpec" name="SearchResourceSpec" bindingOperationName="SearchResourceSpec" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="http://www.ICLNBIDataService.com/UpdateCircuit" name="UpdateCircuit" bindingOperationName="UpdateCircuit" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="http://www.ICLNBIDataService.com/UpdateDevice" name="UpdateDevice" bindingOperationName="UpdateDevice" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="http://www.ICLNBIDataService.com/UpdateLocation" name="UpdateLocation" bindingOperationName="UpdateLocation" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="http://www.ICLNBIDataService.com/UpdateLocation" name="UpdateParty" bindingOperationName="UpdateParty" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="http://www.ICLNBIDataService.com/UpdateService" name="UpdateService" bindingOperationName="UpdateService" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="http://www.ICLNBIDataService.com/UpdateTerminationPoint" name="UpdateTerminationPoint" bindingOperationName="UpdateTerminationPoint" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="http://www.ICLNBIDataService.com/UpdateTopology" name="UpdateTopology" bindingOperationName="UpdateTopology" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="http://www.ICLNBIDataService.com/ValidationResource" name="ValidationResource" bindingOperationName="ValidationResource" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation></con:interface><con:testSuite name="TEST2"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="Sanity" searchProperties="false" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="d0c62800-627a-469f-9576-0411a4f64ee1" discardOkResults="false"><con:settings/><con:testStep type="groovy" name="Groovy Script"><con:settings/><con:config><script>import java.io.*
import jxl.*
def f = new File ("C:\\Users\\aa63458\\Desktop\\GROOVY\\TCASES.xls")
def wk = Workbook.getWorkbook(f)
def ws = wk.getSheet("Sheet1")
 r =ws.getRows()
 log.info r 
 for (def i =1;i&lt;r;i++)
 
{
 	Cell c1 = ws.getCell(2,i)

 	if (c1.getContents().equalsIgnoreCase("Y"))
 	{

 	 log.info "s got"
      log.info c1.getContents()
      Cell c2 =ws.getCell(1,i)
      testRunner.runTestStepByName(c2.getContents())
 	}
 
}</script></con:config></con:testStep><con:testStep type="request" name="CreateDevice - ADTRAN"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>ICLNBIDataServiceBinding</con:interface><con:operation>CreateDevice</con:operation><con:request name="CreateDevice - ADTRAN" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="ec1e757b-c64a-4e55-8728-b43eb204be0a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://iclsmxtest.test.intranet:10002/icl/services/ICL_2_0?wsdl</con:endpoint><con:request><![CDATA[	<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:icl="http://www.ICLNBI.com/ICLNBI_V2.00.xsd">
	   <soapenv:Header/>
	   <soapenv:Body>
	      <tns:CreateDeviceRequest xsi:schemaLocation="http://www.ICLNBI.com/ICLNBI_V2.00.xsd ICL_V2.01.xsd" xmlns:tns="http://www.ICLNBI.com/ICLNBI_V2.00.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	         <MessageElements>
	            <MessageAddressing>
	               <from>DSP</from>
	               <to>ICL</to>
	               <replyTo>DSP</replyTo>
	               <messageID>DSP12345</messageID>
	               <action>CreateDevice</action>
	               <timestamp>2008-09-29T07:19:45</timestamp>
	               <transactionID>1234</transactionID>
	               <serviceName>CreateDevice</serviceName>
	               <serviceVersion>3.0</serviceVersion>
	               <userId/>
	               <password/>
	            </MessageAddressing>
	         </MessageElements>
	         <Device>
	            <!--required from DSP-->
	            <commonName>AVLLINXA141-030020.05A</commonName>
	            <sourceSystem>ARM</sourceSystem>
	            <CLLICode>AVLLINXA141</CLLICode>
	            <!--<locationCLLI>ABNGVAXA</locationCLLI>-->
	            <ResourceType/>
	            <ResourceSubType>Redback SE 800</ResourceSubType>
	            <ResourceDescribedBy>
	               <CharacteristicName>isSharedOrDedicated</CharacteristicName>
	               <CharacteristicValue>Shared</CharacteristicValue>
	            </ResourceDescribedBy>
	            <ResourceDescribedBy>
	               <CharacteristicName>PortDirection</CharacteristicName>
	               <CharacteristicValue>CF</CharacteristicValue>
	            </ResourceDescribedBy>
	            <ResourceDescribedBy>
	               <CharacteristicName>MetaDataRequired</CharacteristicName>
	               <CharacteristicValue>True</CharacteristicValue>
	            </ResourceDescribedBy>
	            <EMSHostName>Cisco network</EMSHostName>
	            <OwnsResourceDetails>
	               <dataOwner>IXC</dataOwner>
	               <Customer>
	                  <commonName>A002085</commonName>
	               </Customer>
	            </OwnsResourceDetails>
	            <prStatus>Planned</prStatus>
	            <HasPhysicalDeviceRoles>
	               <commonName>NPE</commonName>
	            </HasPhysicalDeviceRoles>
	            <ConsistsOfRack>
	               <commonName>01WLSO.01</commonName>
	            </ConsistsOfRack>
	            <InstalledAtAddress>
	               <commonName>D51441</commonName>
	            </InstalledAtAddress>
	         </Device>
	      </tns:CreateDeviceRequest>
	   </soapenv:Body>
	</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="c8cc7d97-d528-40a1-b181-7498a8ad8685"/><con:assertion type="Simple Contains" name="Contains"><con:configuration><token>SUCCESS</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.ICLNBIDataService.com/CreateDevice"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/></con:soapui-project>